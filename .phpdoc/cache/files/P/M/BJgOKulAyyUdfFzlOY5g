1650932247
AwuilbDvXz%3Aea6304c896bb82584a9ee7734c776963-a7a8497e0614e73c5f4b8ac03bf52b07
s:230040:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImE3YTg0OTdlMDYxNGU3M2M1ZjRiOGFjMDNiZjUyYjA3IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTc6IkNvbmZpZ3VyYXRpb24ucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6Njk6InZlbmRvci9zeW1mb255L2ZyYW1ld29yay1idW5kbGUvRGVwZW5kZW5jeUluamVjdGlvbi9Db25maWd1cmF0aW9uLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MTAzMTQ1OiI8P3BocAoKLyoKICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIFN5bWZvbnkgcGFja2FnZS4KICoKICogKGMpIEZhYmllbiBQb3RlbmNpZXIgPGZhYmllbkBzeW1mb255LmNvbT4KICoKICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0UKICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuCiAqLwoKbmFtZXNwYWNlIFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uOwoKdXNlIERvY3RyaW5lXENvbW1vblxBbm5vdGF0aW9uc1xBbm5vdGF0aW9uOwp1c2UgRG9jdHJpbmVcQ29tbW9uXENhY2hlXENhY2hlOwp1c2UgRG9jdHJpbmVcREJBTFxDb25uZWN0aW9uOwp1c2UgU3ltZm9ueVxCdW5kbGVcRnVsbFN0YWNrOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcQXNzZXRcUGFja2FnZTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcTm9kZUJ1aWxkZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXFRyZWVCdWlsZGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQ29uZmlndXJhdGlvbkludGVyZmFjZTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEV4Y2VwdGlvblxJbnZhbGlkQ29uZmlndXJhdGlvbkV4Y2VwdGlvbjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XERlcGVuZGVuY3lJbmplY3Rpb25cRXhjZXB0aW9uXExvZ2ljRXhjZXB0aW9uOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcRm9ybVxGb3JtOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cENsaWVudFxIdHRwQ2xpZW50Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cQ29va2llOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcTG9ja1xMb2NrOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcTG9ja1xTdG9yZVxTZW1hcGhvcmVTdG9yZTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XE1haWxlclxNYWlsZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxNZXNzZW5nZXJcTWVzc2FnZUJ1c0ludGVyZmFjZTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XE5vdGlmaWVyXE5vdGlmaWVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcUHJvcGVydHlJbmZvXFByb3BlcnR5SW5mb0V4dHJhY3RvckludGVyZmFjZTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFJhdGVMaW1pdGVyXFBvbGljeVxUb2tlbkJ1Y2tldExpbWl0ZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZXJpYWxpemVyXFNlcmlhbGl6ZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxUcmFuc2xhdGlvblxUcmFuc2xhdG9yOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcVmFsaWRhdG9yXFZhbGlkYXRpb247CnVzZSBTeW1mb255XENvbXBvbmVudFxXZWJMaW5rXEh0dHBIZWFkZXJTZXJpYWxpemVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcV29ya2Zsb3dcV29ya2Zsb3dFdmVudHM7CgovKioKICogRnJhbWV3b3JrRXh0ZW5zaW9uIGNvbmZpZ3VyYXRpb24gc3RydWN0dXJlLgogKgogKiBAYXV0aG9yIEplcmVteSBNaWtvbGEgPGptaWtvbGFAZ21haWwuY29tPgogKiBAYXV0aG9yIEdyw6lnb2lyZSBQaW5lYXUgPGx5cml4eEBseXJpeHguaW5mbz4KICovCmNsYXNzIENvbmZpZ3VyYXRpb24gaW1wbGVtZW50cyBDb25maWd1cmF0aW9uSW50ZXJmYWNlCnsKICAgIHByaXZhdGUgJGRlYnVnOwoKICAgIC8qKgogICAgICogQHBhcmFtIGJvb2wgJGRlYnVnIFdoZXRoZXIgZGVidWdnaW5nIGlzIGVuYWJsZWQgb3Igbm90CiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdChib29sICRkZWJ1ZykKICAgIHsKICAgICAgICAkdGhpcy0+ZGVidWcgPSAkZGVidWc7CiAgICB9CgogICAgLyoqCiAgICAgKiBHZW5lcmF0ZXMgdGhlIGNvbmZpZ3VyYXRpb24gdHJlZSBidWlsZGVyLgogICAgICoKICAgICAqIEByZXR1cm4gVHJlZUJ1aWxkZXIgVGhlIHRyZWUgYnVpbGRlcgogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0Q29uZmlnVHJlZUJ1aWxkZXIoKQogICAgewogICAgICAgICR0cmVlQnVpbGRlciA9IG5ldyBUcmVlQnVpbGRlcignZnJhbWV3b3JrJyk7CiAgICAgICAgJHJvb3ROb2RlID0gJHRyZWVCdWlsZGVyLT5nZXRSb290Tm9kZSgpOwoKICAgICAgICAkcm9vdE5vZGUKICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgIC0+aWZUcnVlKGZ1bmN0aW9uICgkdikgeyByZXR1cm4gIWlzc2V0KCR2Wydhc3NldHMnXSkgJiYgaXNzZXQoJHZbJ3RlbXBsYXRpbmcnXSkgJiYgY2xhc3NfZXhpc3RzKFBhY2thZ2U6OmNsYXNzKTsgfSkKICAgICAgICAgICAgICAgIC0+dGhlbihmdW5jdGlvbiAoJHYpIHsKICAgICAgICAgICAgICAgICAgICAkdlsnYXNzZXRzJ10gPSBbXTsKCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR2OwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnc2VjcmV0JyktPmVuZCgpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2h0dHBfbWV0aG9kX292ZXJyaWRlJykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oIlNldCB0cnVlIHRvIGVuYWJsZSBzdXBwb3J0IGZvciB0aGUgJ19tZXRob2QnIHJlcXVlc3QgcGFyYW1ldGVyIHRvIGRldGVybWluZSB0aGUgaW50ZW5kZWQgSFRUUCBtZXRob2Qgb24gUE9TVCByZXF1ZXN0cy4gTm90ZTogV2hlbiB1c2luZyB0aGUgSHR0cENhY2hlLCB5b3UgbmVlZCB0byBjYWxsIHRoZSBtZXRob2QgaW4geW91ciBmcm9udCBjb250cm9sbGVyIGluc3RlYWQiKQogICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdFRydWUoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdpZGUnKS0+ZGVmYXVsdE51bGwoKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ3Rlc3QnKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZGVmYXVsdF9sb2NhbGUnKS0+ZGVmYXVsdFZhbHVlKCdlbicpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3RydXN0ZWRfaG9zdHMnKQogICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpLT5pZlN0cmluZygpLT50aGVuKGZ1bmN0aW9uICgkdikgeyByZXR1cm4gWyR2XTsgfSktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ3NjYWxhcicpLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCd0cnVzdGVkX3Byb3hpZXMnKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCd0cnVzdGVkX2hlYWRlcnMnKQogICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCd0cnVzdGVkX2hlYWRlcicpCiAgICAgICAgICAgICAgICAgICAgLT5wZXJmb3JtTm9EZWVwTWVyZ2luZygpCiAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VmFsdWUoWyd4LWZvcndhcmRlZC1mb3InLCAneC1mb3J3YXJkZWQtcG9ydCcsICd4LWZvcndhcmRlZC1wcm90byddKQogICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpLT5pZlN0cmluZygpLT50aGVuKGZ1bmN0aW9uICgkdikgeyByZXR1cm4gJHYgPyBhcnJheV9tYXAoJ3RyaW0nLCBleHBsb2RlKCcsJywgJHYpKSA6IFtdOyB9KS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmVudW1Qcm90b3R5cGUoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnZhbHVlcyhbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9yd2FyZGVkJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZvcndhcmRlZC1mb3InLCAneC1mb3J3YXJkZWQtaG9zdCcsICd4LWZvcndhcmRlZC1wcm90bycsICd4LWZvcndhcmRlZC1wb3J0JywKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2Vycm9yX2NvbnRyb2xsZXInKQogICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdFZhbHVlKCdlcnJvcl9jb250cm9sbGVyJykKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgIDsKCiAgICAgICAgJHRoaXMtPmFkZENzcmZTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZEZvcm1TZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZEh0dHBDYWNoZVNlY3Rpb24oJHJvb3ROb2RlKTsKICAgICAgICAkdGhpcy0+YWRkRXNpU2VjdGlvbigkcm9vdE5vZGUpOwogICAgICAgICR0aGlzLT5hZGRTc2lTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZEZyYWdtZW50c1NlY3Rpb24oJHJvb3ROb2RlKTsKICAgICAgICAkdGhpcy0+YWRkUHJvZmlsZXJTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZFdvcmtmbG93U2VjdGlvbigkcm9vdE5vZGUpOwogICAgICAgICR0aGlzLT5hZGRSb3V0ZXJTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZFNlc3Npb25TZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZFJlcXVlc3RTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZEFzc2V0c1NlY3Rpb24oJHJvb3ROb2RlKTsKICAgICAgICAkdGhpcy0+YWRkVHJhbnNsYXRvclNlY3Rpb24oJHJvb3ROb2RlKTsKICAgICAgICAkdGhpcy0+YWRkVmFsaWRhdGlvblNlY3Rpb24oJHJvb3ROb2RlKTsKICAgICAgICAkdGhpcy0+YWRkQW5ub3RhdGlvbnNTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZFNlcmlhbGl6ZXJTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZFByb3BlcnR5QWNjZXNzU2VjdGlvbigkcm9vdE5vZGUpOwogICAgICAgICR0aGlzLT5hZGRQcm9wZXJ0eUluZm9TZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZENhY2hlU2VjdGlvbigkcm9vdE5vZGUpOwogICAgICAgICR0aGlzLT5hZGRQaHBFcnJvcnNTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZFdlYkxpbmtTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZExvY2tTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZE1lc3NlbmdlclNlY3Rpb24oJHJvb3ROb2RlKTsKICAgICAgICAkdGhpcy0+YWRkUm9ib3RzSW5kZXhTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZEh0dHBDbGllbnRTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZE1haWxlclNlY3Rpb24oJHJvb3ROb2RlKTsKICAgICAgICAkdGhpcy0+YWRkU2VjcmV0c1NlY3Rpb24oJHJvb3ROb2RlKTsKICAgICAgICAkdGhpcy0+YWRkTm90aWZpZXJTZWN0aW9uKCRyb290Tm9kZSk7CiAgICAgICAgJHRoaXMtPmFkZFJhdGVMaW1pdGVyU2VjdGlvbigkcm9vdE5vZGUpOwoKICAgICAgICByZXR1cm4gJHRyZWVCdWlsZGVyOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkU2VjcmV0c1NlY3Rpb24oQXJyYXlOb2RlRGVmaW5pdGlvbiAkcm9vdE5vZGUpCiAgICB7CiAgICAgICAgJHJvb3ROb2RlCiAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3NlY3JldHMnKQogICAgICAgICAgICAgICAgICAgIC0+Y2FuQmVEaXNhYmxlZCgpCiAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgndmF1bHRfZGlyZWN0b3J5JyktPmRlZmF1bHRWYWx1ZSgnJWtlcm5lbC5wcm9qZWN0X2RpciUvY29uZmlnL3NlY3JldHMvJWtlcm5lbC5ydW50aW1lX2Vudmlyb25tZW50JScpLT5jYW5ub3RCZUVtcHR5KCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnbG9jYWxfZG90ZW52X2ZpbGUnKS0+ZGVmYXVsdFZhbHVlKCcla2VybmVsLnByb2plY3RfZGlyJS8uZW52LiVrZXJuZWwuZW52aXJvbm1lbnQlLmxvY2FsJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZGVjcnlwdGlvbl9lbnZfdmFyJyktPmRlZmF1bHRWYWx1ZSgnYmFzZTY0OmRlZmF1bHQ6OlNZTUZPTllfREVDUllQVElPTl9TRUNSRVQnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICA7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiBhZGRDc3JmU2VjdGlvbihBcnJheU5vZGVEZWZpbml0aW9uICRyb290Tm9kZSkKICAgIHsKICAgICAgICAkcm9vdE5vZGUKICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnY3NyZl9wcm90ZWN0aW9uJykKICAgICAgICAgICAgICAgICAgICAtPnRyZWF0RmFsc2VMaWtlKFsnZW5hYmxlZCcgPT4gZmFsc2VdKQogICAgICAgICAgICAgICAgICAgIC0+dHJlYXRUcnVlTGlrZShbJ2VuYWJsZWQnID0+IHRydWVdKQogICAgICAgICAgICAgICAgICAgIC0+dHJlYXROdWxsTGlrZShbJ2VuYWJsZWQnID0+IHRydWVdKQogICAgICAgICAgICAgICAgICAgIC0+YWRkRGVmYXVsdHNJZk5vdFNldCgpCiAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHRzIHRvIGZyYW1ld29yay5zZXNzaW9uLmVuYWJsZWQgJiYgIWNsYXNzX2V4aXN0cyhGdWxsU3RhY2s6OmNsYXNzKSAmJiBpbnRlcmZhY2VfZXhpc3RzKENzcmZUb2tlbk1hbmFnZXJJbnRlcmZhY2U6OmNsYXNzKQogICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdlbmFibGVkJyktPmRlZmF1bHROdWxsKCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkRm9ybVNlY3Rpb24oQXJyYXlOb2RlRGVmaW5pdGlvbiAkcm9vdE5vZGUpCiAgICB7CiAgICAgICAgJHJvb3ROb2RlCiAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2Zvcm0nKQogICAgICAgICAgICAgICAgICAgIC0+aW5mbygnZm9ybSBjb25maWd1cmF0aW9uJykKICAgICAgICAgICAgICAgICAgICAtPnshY2xhc3NfZXhpc3RzKEZ1bGxTdGFjazo6Y2xhc3MpICYmIGNsYXNzX2V4aXN0cyhGb3JtOjpjbGFzcykgPyAnY2FuQmVEaXNhYmxlZCcgOiAnY2FuQmVFbmFibGVkJ30oKQogICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnY3NyZl9wcm90ZWN0aW9uJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dHJlYXRGYWxzZUxpa2UoWydlbmFibGVkJyA9PiBmYWxzZV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRyZWF0VHJ1ZUxpa2UoWydlbmFibGVkJyA9PiB0cnVlXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dHJlYXROdWxsTGlrZShbJ2VuYWJsZWQnID0+IHRydWVdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hZGREZWZhdWx0c0lmTm90U2V0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ2VuYWJsZWQnKS0+ZGVmYXVsdE51bGwoKS0+ZW5kKCkgLy8gZGVmYXVsdHMgdG8gZnJhbWV3b3JrLmNzcmZfcHJvdGVjdGlvbi5lbmFibGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdmaWVsZF9uYW1lJyktPmRlZmF1bHRWYWx1ZSgnX3Rva2VuJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gYmUgc2V0IHRvIGZhbHNlIGluIFN5bWZvbnkgNi4wCiAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ2xlZ2FjeV9lcnJvcl9tZXNzYWdlcycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRUcnVlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFsaWRhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZUcnVlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW4oZnVuY3Rpb24gKCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEB0cmlnZ2VyX2Vycm9yKCdTaW5jZSBzeW1mb255L2ZyYW1ld29yay1idW5kbGUgNS4yOiBTZXR0aW5nIHRoZSAiZnJhbWV3b3JrLmZvcm0ubGVnYWN5X2Vycm9yX21lc3NhZ2VzIiBvcHRpb24gdG8gInRydWUiIGlzIGRlcHJlY2F0ZWQuIEl0IHdpbGwgaGF2ZSBubyBlZmZlY3QgYXMgb2YgU3ltZm9ueSA2LjAuJywgXEVfVVNFUl9ERVBSRUNBVEVEKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkdjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkSHR0cENhY2hlU2VjdGlvbihBcnJheU5vZGVEZWZpbml0aW9uICRyb290Tm9kZSkKICAgIHsKICAgICAgICAkcm9vdE5vZGUKICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnaHR0cF9jYWNoZScpCiAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdIVFRQIGNhY2hlIGNvbmZpZ3VyYXRpb24nKQogICAgICAgICAgICAgICAgICAgIC0+Y2FuQmVFbmFibGVkKCkKICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygncHJpdmF0ZV9oZWFkZXInKQogICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdkZWJ1ZycpLT5kZWZhdWx0VmFsdWUoJyVrZXJuZWwuZGVidWclJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW51bU5vZGUoJ3RyYWNlX2xldmVsJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFsdWVzKFsnbm9uZScsICdzaG9ydCcsICdmdWxsJ10pCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCd0cmFjZV9oZWFkZXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5pbnRlZ2VyTm9kZSgnZGVmYXVsdF90dGwnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3ByaXZhdGVfaGVhZGVycycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnBlcmZvcm1Ob0RlZXBNZXJnaW5nKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyUHJvdG90eXBlKCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnYWxsb3dfcmVsb2FkJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ2FsbG93X3JldmFsaWRhdGUnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5pbnRlZ2VyTm9kZSgnc3RhbGVfd2hpbGVfcmV2YWxpZGF0ZScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmludGVnZXJOb2RlKCdzdGFsZV9pZl9lcnJvcicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgIDsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGFkZEVzaVNlY3Rpb24oQXJyYXlOb2RlRGVmaW5pdGlvbiAkcm9vdE5vZGUpCiAgICB7CiAgICAgICAgJHJvb3ROb2RlCiAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2VzaScpCiAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdlc2kgY29uZmlndXJhdGlvbicpCiAgICAgICAgICAgICAgICAgICAgLT5jYW5CZUVuYWJsZWQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkU3NpU2VjdGlvbihBcnJheU5vZGVEZWZpbml0aW9uICRyb290Tm9kZSkKICAgIHsKICAgICAgICAkcm9vdE5vZGUKICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnc3NpJykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ3NzaSBjb25maWd1cmF0aW9uJykKICAgICAgICAgICAgICAgICAgICAtPmNhbkJlRW5hYmxlZCgpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgIC0+ZW5kKCk7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiBhZGRGcmFnbWVudHNTZWN0aW9uKEFycmF5Tm9kZURlZmluaXRpb24gJHJvb3ROb2RlKQogICAgewogICAgICAgICRyb290Tm9kZQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdmcmFnbWVudHMnKQogICAgICAgICAgICAgICAgICAgIC0+aW5mbygnZnJhZ21lbnRzIGNvbmZpZ3VyYXRpb24nKQogICAgICAgICAgICAgICAgICAgIC0+Y2FuQmVFbmFibGVkKCkKICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdoaW5jbHVkZV9kZWZhdWx0X3RlbXBsYXRlJyktPmRlZmF1bHROdWxsKCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgncGF0aCcpLT5kZWZhdWx0VmFsdWUoJy9fZnJhZ21lbnQnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICA7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiBhZGRQcm9maWxlclNlY3Rpb24oQXJyYXlOb2RlRGVmaW5pdGlvbiAkcm9vdE5vZGUpCiAgICB7CiAgICAgICAgJHJvb3ROb2RlCiAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3Byb2ZpbGVyJykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ3Byb2ZpbGVyIGNvbmZpZ3VyYXRpb24nKQogICAgICAgICAgICAgICAgICAgIC0+Y2FuQmVFbmFibGVkKCkKICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnY29sbGVjdCcpLT5kZWZhdWx0VHJ1ZSgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdvbmx5X2V4Y2VwdGlvbnMnKS0+ZGVmYXVsdEZhbHNlKCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ29ubHlfbWFzdGVyX3JlcXVlc3RzJyktPmRlZmF1bHRGYWxzZSgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2RzbicpLT5kZWZhdWx0VmFsdWUoJ2ZpbGU6JWtlcm5lbC5jYWNoZV9kaXIlL3Byb2ZpbGVyJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkV29ya2Zsb3dTZWN0aW9uKEFycmF5Tm9kZURlZmluaXRpb24gJHJvb3ROb2RlKQogICAgewogICAgICAgICRyb290Tm9kZQogICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnd29ya2Zsb3cnKQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCd3b3JrZmxvd3MnKQogICAgICAgICAgICAgICAgICAgIC0+Y2FuQmVFbmFibGVkKCkKICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFsd2F5cyhmdW5jdGlvbiAoJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcaXNfYXJyYXkoJHYpICYmIHRydWUgPT09ICR2WydlbmFibGVkJ10pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd29ya2Zsb3dzID0gJHY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zZXQoJHdvcmtmbG93c1snZW5hYmxlZCddKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPT09IFxjb3VudCgkd29ya2Zsb3dzKSAmJiBpc3NldCgkd29ya2Zsb3dzWzBdWydlbmFibGVkJ10pICYmIDEgPT09IFxjb3VudCgkd29ya2Zsb3dzWzBdKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd29ya2Zsb3dzID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMSA9PT0gXGNvdW50KCR3b3JrZmxvd3MpICYmIGlzc2V0KCR3b3JrZmxvd3NbJ3dvcmtmbG93cyddKSAmJiBhcnJheV9rZXlzKCR3b3JrZmxvd3NbJ3dvcmtmbG93cyddKSAhPT0gcmFuZ2UoMCwgXGNvdW50KCR3b3JrZmxvd3MpIC0gMSkgJiYgIWVtcHR5KGFycmF5X2RpZmYoYXJyYXlfa2V5cygkd29ya2Zsb3dzWyd3b3JrZmxvd3MnXSksIFsnYXVkaXRfdHJhaWwnLCAndHlwZScsICdtYXJraW5nX3N0b3JlJywgJ3N1cHBvcnRzJywgJ3N1cHBvcnRfc3RyYXRlZ3knLCAnaW5pdGlhbF9tYXJraW5nJywgJ3BsYWNlcycsICd0cmFuc2l0aW9ucyddKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdvcmtmbG93cyA9ICR3b3JrZmxvd3NbJ3dvcmtmbG93cyddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJHdvcmtmbG93cyBhcyAka2V5ID0+ICR3b3JrZmxvdykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHdvcmtmbG93WydlbmFibGVkJ10pICYmIGZhbHNlID09PSAkd29ya2Zsb3dbJ2VuYWJsZWQnXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IExvZ2ljRXhjZXB0aW9uKHNwcmludGYoJ0Nhbm5vdCBkaXNhYmxlIGEgc2luZ2xlIHdvcmtmbG93LiBSZW1vdmUgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSB3b3JrZmxvdyAiJXMiIGluc3RlYWQuJywgJHdvcmtmbG93WyduYW1lJ10pKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zZXQoJHdvcmtmbG93c1ska2V5XVsnZW5hYmxlZCddKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2ID0gWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW5hYmxlZCcgPT4gdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dvcmtmbG93cycgPT4gJHdvcmtmbG93cywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkdjsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCd3b3JrZmxvd3MnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgnbmFtZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnYXJyYXknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdzdXBwb3J0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygncGxhY2UnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCd0cmFuc2l0aW9uJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnZXZlbnRfdG9fZGlzcGF0Y2gnLCAnZXZlbnRzX3RvX2Rpc3BhdGNoJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2F1ZGl0X3RyYWlsJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2FuQmVFbmFibGVkKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVudW1Ob2RlKCd0eXBlJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFsdWVzKFsnd29ya2Zsb3cnLCAnc3RhdGVfbWFjaGluZSddKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VmFsdWUoJ3N0YXRlX21hY2hpbmUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdtYXJraW5nX3N0b3JlJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW51bU5vZGUoJ3R5cGUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnZhbHVlcyhbJ21ldGhvZCddKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3Byb3BlcnR5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VmFsdWUoJ21hcmtpbmcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3NlcnZpY2UnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNhbm5vdEJlRW1wdHkoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnc3VwcG9ydHMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW4oZnVuY3Rpb24gKCR2KSB7IHJldHVybiBbJHZdOyB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ3NjYWxhcicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jYW5ub3RCZUVtcHR5KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnZhbGlkYXRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pZlRydWUoZnVuY3Rpb24gKCR2KSB7IHJldHVybiAhY2xhc3NfZXhpc3RzKCR2KSAmJiAhaW50ZXJmYWNlX2V4aXN0cygkdiwgZmFsc2UpOyB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW5JbnZhbGlkKCdUaGUgc3VwcG9ydGVkIGNsYXNzIG9yIGludGVyZmFjZSAiJXMiIGRvZXMgbm90IGV4aXN0LicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnc3VwcG9ydF9zdHJhdGVneScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNhbm5vdEJlRW1wdHkoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdpbml0aWFsX21hcmtpbmcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCktPmNhc3RUb0FycmF5KCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZShbXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnZhcmlhYmxlTm9kZSgnZXZlbnRzX3RvX2Rpc3BhdGNoJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdFZhbHVlKG51bGwpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnZhbGlkYXRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShmdW5jdGlvbiAoJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT09ICR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFcaXNfYXJyYXkoJHYpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJHYgYXMgJHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIVxpc19zdHJpbmcoJHZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzX2V4aXN0cyhXb3JrZmxvd0V2ZW50czo6Y2xhc3MpICYmICFcaW5fYXJyYXkoJHZhbHVlLCBXb3JrZmxvd0V2ZW50czo6QUxJQVNFUykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuSW52YWxpZCgnVGhlIHZhbHVlIG11c3QgYmUgIm51bGwiIG9yIGFuIGFycmF5IG9mIHdvcmtmbG93IGV2ZW50cyAobGlrZSBbIndvcmtmbG93LmVudGVyIl0pLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1NlbGVjdCB3aGljaCBUcmFuc2l0aW9uIGV2ZW50cyBzaG91bGQgYmUgZGlzcGF0Y2hlZCBmb3IgdGhpcyBXb3JrZmxvdycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmV4YW1wbGUoWyd3b3JrZmxvdy5lbnRlcicsICd3b3JrZmxvdy50cmFuc2l0aW9uJ10pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3BsYWNlcycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YWx3YXlzKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW4oZnVuY3Rpb24gKCRwbGFjZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXQncyBhbiBpbmRleGVkIGFycmF5IG9mIHNoYXBlICBbJ3BsYWNlMScsICdwbGFjZTInXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHBsYWNlc1swXSkgJiYgXGlzX3N0cmluZygkcGxhY2VzWzBdKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5X21hcChmdW5jdGlvbiAoc3RyaW5nICRwbGFjZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbJ25hbWUnID0+ICRwbGFjZV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAkcGxhY2VzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXQncyBhbiBpbmRleGVkIGFycmF5LCB3ZSBsZXQgdGhlIHZhbGlkYXRpb24gb2NjdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRwbGFjZXNbMF0pICYmIFxpc19hcnJheSgkcGxhY2VzWzBdKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRwbGFjZXM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRwbGFjZXMgYXMgJG5hbWUgPT4gJHBsYWNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXGlzX2FycmF5KCRwbGFjZSkgJiYgXGFycmF5X2tleV9leGlzdHMoJ25hbWUnLCAkcGxhY2UpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGxhY2VbJ25hbWUnXSA9ICRuYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBsYWNlc1skbmFtZV0gPSAkcGxhY2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnJheV92YWx1ZXMoJHBsYWNlcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aXNSZXF1aXJlZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnJlcXVpcmVzQXRMZWFzdE9uZUVsZW1lbnQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ2FycmF5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aXNSZXF1aXJlZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNhbm5vdEJlRW1wdHkoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdtZXRhZGF0YScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPm5vcm1hbGl6ZUtleXMoZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZShbXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZXhhbXBsZShbJ2NvbG9yJyA9PiAnYmx1ZScsICdkZXNjcmlwdGlvbicgPT4gJ1dvcmtmbG93IHRvIG1hbmFnZSBhcnRpY2xlLiddKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ3ZhcmlhYmxlJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgndHJhbnNpdGlvbnMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFsd2F5cygpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKGZ1bmN0aW9uICgkdHJhbnNpdGlvbnMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXQncyBhbiBpbmRleGVkIGFycmF5LCB3ZSBsZXQgdGhlIHZhbGlkYXRpb24gb2NjdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCR0cmFuc2l0aW9uc1swXSkgJiYgXGlzX2FycmF5KCR0cmFuc2l0aW9uc1swXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkdHJhbnNpdGlvbnM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR0cmFuc2l0aW9ucyBhcyAkbmFtZSA9PiAkdHJhbnNpdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxpc19hcnJheSgkdHJhbnNpdGlvbikgJiYgXGFycmF5X2tleV9leGlzdHMoJ25hbWUnLCAkdHJhbnNpdGlvbikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0cmFuc2l0aW9uWyduYW1lJ10gPSAkbmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0cmFuc2l0aW9uc1skbmFtZV0gPSAkdHJhbnNpdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0cmFuc2l0aW9uczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pc1JlcXVpcmVkKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cmVxdWlyZXNBdExlYXN0T25lRWxlbWVudCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnYXJyYXknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ25hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pc1JlcXVpcmVkKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2Fubm90QmVFbXB0eSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdndWFyZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNhbm5vdEJlRW1wdHkoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdBbiBleHByZXNzaW9uIHRvIGJsb2NrIHRoZSB0cmFuc2l0aW9uJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZXhhbXBsZSgnaXNfZnVsbHlfYXV0aGVudGljYXRlZCgpIGFuZCBpc19ncmFudGVkKFwnUk9MRV9KT1VSTkFMSVNUXCcpIGFuZCBzdWJqZWN0LmdldFRpdGxlKCkgPT0gXCdNeSBmaXJzdCBhcnRpY2xlXCcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdmcm9tJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pZlN0cmluZygpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKGZ1bmN0aW9uICgkdikgeyByZXR1cm4gWyR2XTsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cmVxdWlyZXNBdExlYXN0T25lRWxlbWVudCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnc2NhbGFyJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNhbm5vdEJlRW1wdHkoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCd0bycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZTdHJpbmcoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbihmdW5jdGlvbiAoJHYpIHsgcmV0dXJuIFskdl07IH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnJlcXVpcmVzQXRMZWFzdE9uZUVsZW1lbnQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ3NjYWxhcicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jYW5ub3RCZUVtcHR5KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnbWV0YWRhdGEnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5ub3JtYWxpemVLZXlzKGZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VmFsdWUoW10pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmV4YW1wbGUoWydjb2xvcicgPT4gJ2JsdWUnLCAnZGVzY3JpcHRpb24nID0+ICdXb3JrZmxvdyB0byBtYW5hZ2UgYXJ0aWNsZS4nXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCd2YXJpYWJsZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ21ldGFkYXRhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+bm9ybWFsaXplS2V5cyhmYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdFZhbHVlKFtdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5leGFtcGxlKFsnY29sb3InID0+ICdibHVlJywgJ2Rlc2NyaXB0aW9uJyA9PiAnV29ya2Zsb3cgdG8gbWFuYWdlIGFydGljbGUuJ10pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgndmFyaWFibGUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFsaWRhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShmdW5jdGlvbiAoJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkdlsnc3VwcG9ydHMnXSAmJiBpc3NldCgkdlsnc3VwcG9ydF9zdHJhdGVneSddKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuSW52YWxpZCgnInN1cHBvcnRzIiBhbmQgInN1cHBvcnRfc3RyYXRlZ3kiIGNhbm5vdCBiZSB1c2VkIHRvZ2V0aGVyLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFsaWRhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShmdW5jdGlvbiAoJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhJHZbJ3N1cHBvcnRzJ10gJiYgIWlzc2V0KCR2WydzdXBwb3J0X3N0cmF0ZWd5J10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW5JbnZhbGlkKCcic3VwcG9ydHMiIG9yICJzdXBwb3J0X3N0cmF0ZWd5IiBzaG91bGQgYmUgY29uZmlndXJlZC4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hbHdheXMoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKGZ1bmN0aW9uICgkdmFsdWVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIHRvIGRlYWwgd2l0aCBYTUwgd2hlbiB0aGUgdXNlciB3YW50cyBhbiBlbXB0eSBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcYXJyYXlfa2V5X2V4aXN0cygnZXZlbnRfdG9fZGlzcGF0Y2gnLCAkdmFsdWVzKSAmJiBudWxsID09PSAkdmFsdWVzWydldmVudF90b19kaXNwYXRjaCddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2YWx1ZXNbJ2V2ZW50c190b19kaXNwYXRjaCddID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2V0KCR2YWx1ZXNbJ2V2ZW50X3RvX2Rpc3BhdGNoJ10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR2YWx1ZXM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgIDsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGFkZFJvdXRlclNlY3Rpb24oQXJyYXlOb2RlRGVmaW5pdGlvbiAkcm9vdE5vZGUpCiAgICB7CiAgICAgICAgJHJvb3ROb2RlCiAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3JvdXRlcicpCiAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdyb3V0ZXIgY29uZmlndXJhdGlvbicpCiAgICAgICAgICAgICAgICAgICAgLT5jYW5CZUVuYWJsZWQoKQogICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3Jlc291cmNlJyktPmlzUmVxdWlyZWQoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCd0eXBlJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZGVmYXVsdF91cmknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdUaGUgZGVmYXVsdCBVUkkgdXNlZCB0byBnZW5lcmF0ZSBVUkxzIGluIGEgbm9uLUhUVFAgY29udGV4dCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHROdWxsKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2h0dHBfcG9ydCcpLT5kZWZhdWx0VmFsdWUoODApLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2h0dHBzX3BvcnQnKS0+ZGVmYXVsdFZhbHVlKDQ0MyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnc3RyaWN0X3JlcXVpcmVtZW50cycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNldCB0byB0cnVlIHRvIHRocm93IGFuIGV4Y2VwdGlvbiB3aGVuIGEgcGFyYW1ldGVyIGRvZXMgbm90IG1hdGNoIHRoZSByZXF1aXJlbWVudHNcbiIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNldCB0byBmYWxzZSB0byBkaXNhYmxlIGV4Y2VwdGlvbnMgd2hlbiBhIHBhcmFtZXRlciBkb2VzIG5vdCBtYXRjaCB0aGUgcmVxdWlyZW1lbnRzIChhbmQgcmV0dXJuIG51bGwgaW5zdGVhZClcbiIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNldCB0byBudWxsIHRvIGRpc2FibGUgcGFyYW1ldGVyIGNoZWNrcyBhZ2FpbnN0IHJlcXVpcmVtZW50c1xuIi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJ3RydWUnIGlzIHRoZSBwcmVmZXJyZWQgY29uZmlndXJhdGlvbiBpbiBkZXZlbG9wbWVudCBtb2RlLCB3aGlsZSAnZmFsc2UnIG9yICdudWxsJyBtaWdodCBiZSBwcmVmZXJyZWQgaW4gcHJvZHVjdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdFRydWUoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ3V0ZjgnKS0+ZGVmYXVsdE51bGwoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICA7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiBhZGRTZXNzaW9uU2VjdGlvbihBcnJheU5vZGVEZWZpbml0aW9uICRyb290Tm9kZSkKICAgIHsKICAgICAgICAkcm9vdE5vZGUKICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnc2Vzc2lvbicpCiAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdzZXNzaW9uIGNvbmZpZ3VyYXRpb24nKQogICAgICAgICAgICAgICAgICAgIC0+Y2FuQmVFbmFibGVkKCkKICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdzdG9yYWdlX2lkJyktPmRlZmF1bHRWYWx1ZSgnc2Vzc2lvbi5zdG9yYWdlLm5hdGl2ZScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2hhbmRsZXJfaWQnKS0+ZGVmYXVsdFZhbHVlKCdzZXNzaW9uLmhhbmRsZXIubmF0aXZlX2ZpbGUnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFsaWRhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZUcnVlKGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZV9zdHIoJHYsICRwYXJzZWQpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGltcGxvZGUoJyYnLCBhcnJheV9rZXlzKCRwYXJzZWQpKSAhPT0gKHN0cmluZykgJHY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW5JbnZhbGlkKCdTZXNzaW9uIG5hbWUgJXMgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXIocyknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnY29va2llX2xpZmV0aW1lJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnY29va2llX3BhdGgnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdjb29raWVfZG9tYWluJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW51bU5vZGUoJ2Nvb2tpZV9zZWN1cmUnKS0+dmFsdWVzKFt0cnVlLCBmYWxzZSwgJ2F1dG8nXSktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ2Nvb2tpZV9odHRwb25seScpLT5kZWZhdWx0VHJ1ZSgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVudW1Ob2RlKCdjb29raWVfc2FtZXNpdGUnKS0+dmFsdWVzKFtudWxsLCBDb29raWU6OlNBTUVTSVRFX0xBWCwgQ29va2llOjpTQU1FU0lURV9TVFJJQ1QsIENvb2tpZTo6U0FNRVNJVEVfTk9ORV0pLT5kZWZhdWx0TnVsbCgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCd1c2VfY29va2llcycpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2djX2Rpdmlzb3InKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdnY19wcm9iYWJpbGl0eScpLT5kZWZhdWx0VmFsdWUoMSktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZ2NfbWF4bGlmZXRpbWUnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdzYXZlX3BhdGgnKS0+ZGVmYXVsdFZhbHVlKCcla2VybmVsLmNhY2hlX2RpciUvc2Vzc2lvbnMnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5pbnRlZ2VyTm9kZSgnbWV0YWRhdGFfdXBkYXRlX3RocmVzaG9sZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZSgwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdzZWNvbmRzIHRvIHdhaXQgYmV0d2VlbiAyIHNlc3Npb24gbWV0YWRhdGEgdXBkYXRlcycpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5pbnRlZ2VyTm9kZSgnc2lkX2xlbmd0aCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPm1pbigyMikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+bWF4KDI1NikKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmludGVnZXJOb2RlKCdzaWRfYml0c19wZXJfY2hhcmFjdGVyJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+bWluKDQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPm1heCg2KQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkUmVxdWVzdFNlY3Rpb24oQXJyYXlOb2RlRGVmaW5pdGlvbiAkcm9vdE5vZGUpCiAgICB7CiAgICAgICAgJHJvb3ROb2RlCiAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3JlcXVlc3QnKQogICAgICAgICAgICAgICAgICAgIC0+aW5mbygncmVxdWVzdCBjb25maWd1cmF0aW9uJykKICAgICAgICAgICAgICAgICAgICAtPmNhbkJlRW5hYmxlZCgpCiAgICAgICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ2Zvcm1hdCcpCiAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdmb3JtYXRzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ2FycmF5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShmdW5jdGlvbiAoJHYpIHsgcmV0dXJuIFxpc19hcnJheSgkdikgJiYgaXNzZXQoJHZbJ21pbWVfdHlwZSddKTsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKGZ1bmN0aW9uICgkdikgeyByZXR1cm4gJHZbJ21pbWVfdHlwZSddOyB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKS0+Y2FzdFRvQXJyYXkoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnc2NhbGFyJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICA7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiBhZGRBc3NldHNTZWN0aW9uKEFycmF5Tm9kZURlZmluaXRpb24gJHJvb3ROb2RlKQogICAgewogICAgICAgICRyb290Tm9kZQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdhc3NldHMnKQogICAgICAgICAgICAgICAgICAgIC0+aW5mbygnYXNzZXRzIGNvbmZpZ3VyYXRpb24nKQogICAgICAgICAgICAgICAgICAgIC0+eyFjbGFzc19leGlzdHMoRnVsbFN0YWNrOjpjbGFzcykgJiYgY2xhc3NfZXhpc3RzKFBhY2thZ2U6OmNsYXNzKSA/ICdjYW5CZURpc2FibGVkJyA6ICdjYW5CZUVuYWJsZWQnfSgpCiAgICAgICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ2Jhc2VfdXJsJykKICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCd2ZXJzaW9uX3N0cmF0ZWd5JyktPmRlZmF1bHROdWxsKCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgndmVyc2lvbicpLT5kZWZhdWx0TnVsbCgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3ZlcnNpb25fZm9ybWF0JyktPmRlZmF1bHRWYWx1ZSgnJSVzPyUlcycpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2pzb25fbWFuaWZlc3RfcGF0aCcpLT5kZWZhdWx0TnVsbCgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2Jhc2VfcGF0aCcpLT5kZWZhdWx0VmFsdWUoJycpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnYmFzZV91cmxzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cmVxdWlyZXNBdExlYXN0T25lRWxlbWVudCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKS0+Y2FzdFRvQXJyYXkoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPnZhbGlkYXRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5pZlRydWUoZnVuY3Rpb24gKCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNzZXQoJHZbJ3ZlcnNpb25fc3RyYXRlZ3knXSkgJiYgaXNzZXQoJHZbJ3ZlcnNpb24nXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbkludmFsaWQoJ1lvdSBjYW5ub3QgdXNlIGJvdGggInZlcnNpb25fc3RyYXRlZ3kiIGFuZCAidmVyc2lvbiIgYXQgdGhlIHNhbWUgdGltZSB1bmRlciAiYXNzZXRzIi4nKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPnZhbGlkYXRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5pZlRydWUoZnVuY3Rpb24gKCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNzZXQoJHZbJ3ZlcnNpb25fc3RyYXRlZ3knXSkgJiYgaXNzZXQoJHZbJ2pzb25fbWFuaWZlc3RfcGF0aCddKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuSW52YWxpZCgnWW91IGNhbm5vdCB1c2UgYm90aCAidmVyc2lvbl9zdHJhdGVneSIgYW5kICJqc29uX21hbmlmZXN0X3BhdGgiIGF0IHRoZSBzYW1lIHRpbWUgdW5kZXIgImFzc2V0cyIuJykKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT52YWxpZGF0ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZUcnVlKGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzc2V0KCR2Wyd2ZXJzaW9uJ10pICYmIGlzc2V0KCR2Wydqc29uX21hbmlmZXN0X3BhdGgnXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbkludmFsaWQoJ1lvdSBjYW5ub3QgdXNlIGJvdGggInZlcnNpb24iIGFuZCAianNvbl9tYW5pZmVzdF9wYXRoIiBhdCB0aGUgc2FtZSB0aW1lIHVuZGVyICJhc3NldHMiLicpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdwYWNrYWdlJykKICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3BhY2thZ2VzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+bm9ybWFsaXplS2V5cyhmYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ2FycmF5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnYmFzZV91cmwnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3ZlcnNpb25fc3RyYXRlZ3knKS0+ZGVmYXVsdE51bGwoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCd2ZXJzaW9uJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShmdW5jdGlvbiAoJHYpIHsgcmV0dXJuICcnID09PSAkdjsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbihmdW5jdGlvbiAoJHYpIHsgcmV0dXJuOyB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgndmVyc2lvbl9mb3JtYXQnKS0+ZGVmYXVsdE51bGwoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdqc29uX21hbmlmZXN0X3BhdGgnKS0+ZGVmYXVsdE51bGwoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdiYXNlX3BhdGgnKS0+ZGVmYXVsdFZhbHVlKCcnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2Jhc2VfdXJscycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnJlcXVpcmVzQXRMZWFzdE9uZUVsZW1lbnQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCktPmNhc3RUb0FycmF5KCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnc2NhbGFyJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT52YWxpZGF0ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZUcnVlKGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzc2V0KCR2Wyd2ZXJzaW9uX3N0cmF0ZWd5J10pICYmIGlzc2V0KCR2Wyd2ZXJzaW9uJ10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW5JbnZhbGlkKCdZb3UgY2Fubm90IHVzZSBib3RoICJ2ZXJzaW9uX3N0cmF0ZWd5IiBhbmQgInZlcnNpb24iIGF0IHRoZSBzYW1lIHRpbWUgdW5kZXIgImFzc2V0cyIgcGFja2FnZXMuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT52YWxpZGF0ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZUcnVlKGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzc2V0KCR2Wyd2ZXJzaW9uX3N0cmF0ZWd5J10pICYmIGlzc2V0KCR2Wydqc29uX21hbmlmZXN0X3BhdGgnXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbkludmFsaWQoJ1lvdSBjYW5ub3QgdXNlIGJvdGggInZlcnNpb25fc3RyYXRlZ3kiIGFuZCAianNvbl9tYW5pZmVzdF9wYXRoIiBhdCB0aGUgc2FtZSB0aW1lIHVuZGVyICJhc3NldHMiIHBhY2thZ2VzLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFsaWRhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShmdW5jdGlvbiAoJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc3NldCgkdlsndmVyc2lvbiddKSAmJiBpc3NldCgkdlsnanNvbl9tYW5pZmVzdF9wYXRoJ10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW5JbnZhbGlkKCdZb3UgY2Fubm90IHVzZSBib3RoICJ2ZXJzaW9uIiBhbmQgImpzb25fbWFuaWZlc3RfcGF0aCIgYXQgdGhlIHNhbWUgdGltZSB1bmRlciAiYXNzZXRzIiBwYWNrYWdlcy4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgIDsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGFkZFRyYW5zbGF0b3JTZWN0aW9uKEFycmF5Tm9kZURlZmluaXRpb24gJHJvb3ROb2RlKQogICAgewogICAgICAgICRyb290Tm9kZQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCd0cmFuc2xhdG9yJykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ3RyYW5zbGF0b3IgY29uZmlndXJhdGlvbicpCiAgICAgICAgICAgICAgICAgICAgLT57IWNsYXNzX2V4aXN0cyhGdWxsU3RhY2s6OmNsYXNzKSAmJiBjbGFzc19leGlzdHMoVHJhbnNsYXRvcjo6Y2xhc3MpID8gJ2NhbkJlRGlzYWJsZWQnIDogJ2NhbkJlRW5hYmxlZCd9KCkKICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnZmFsbGJhY2snKQogICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdwYXRoJykKICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnZW5hYmxlZF9sb2NhbGUnKQogICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnZmFsbGJhY2tzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnRGVmYXVsdHMgdG8gdGhlIHZhbHVlIG9mICJkZWZhdWx0X2xvY2FsZSIuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpLT5pZlN0cmluZygpLT50aGVuKGZ1bmN0aW9uICgkdikgeyByZXR1cm4gWyR2XTsgfSktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnc2NhbGFyJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZShbXSkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdsb2dnaW5nJyktPmRlZmF1bHRWYWx1ZShmYWxzZSktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZm9ybWF0dGVyJyktPmRlZmF1bHRWYWx1ZSgndHJhbnNsYXRvci5mb3JtYXR0ZXIuZGVmYXVsdCcpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2NhY2hlX2RpcicpLT5kZWZhdWx0VmFsdWUoJyVrZXJuZWwuY2FjaGVfZGlyJS90cmFuc2xhdGlvbnMnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdkZWZhdWx0X3BhdGgnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdUaGUgZGVmYXVsdCBwYXRoIHVzZWQgdG8gbG9hZCB0cmFuc2xhdGlvbnMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VmFsdWUoJyVrZXJuZWwucHJvamVjdF9kaXIlL3RyYW5zbGF0aW9ucycpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3BhdGhzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnZW5hYmxlZF9sb2NhbGVzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdFZhbHVlKFtdKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdwc2V1ZG9fbG9jYWxpemF0aW9uJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2FuQmVFbmFibGVkKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdsb2NhbGl6YWJsZV9odG1sX2F0dHJpYnV0ZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdhY2NlbnRzJyktPmRlZmF1bHRUcnVlKCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5mbG9hdE5vZGUoJ2V4cGFuc2lvbl9mYWN0b3InKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPm1pbigxLjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdFZhbHVlKDEuMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnYnJhY2tldHMnKS0+ZGVmYXVsdFRydWUoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdwYXJzZV9odG1sJyktPmRlZmF1bHRGYWxzZSgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdsb2NhbGl6YWJsZV9odG1sX2F0dHJpYnV0ZXMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnc2NhbGFyJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkVmFsaWRhdGlvblNlY3Rpb24oQXJyYXlOb2RlRGVmaW5pdGlvbiAkcm9vdE5vZGUpCiAgICB7CiAgICAgICAgJHJvb3ROb2RlCiAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3ZhbGlkYXRpb24nKQogICAgICAgICAgICAgICAgICAgIC0+aW5mbygndmFsaWRhdGlvbiBjb25maWd1cmF0aW9uJykKICAgICAgICAgICAgICAgICAgICAtPnshY2xhc3NfZXhpc3RzKEZ1bGxTdGFjazo6Y2xhc3MpICYmIGNsYXNzX2V4aXN0cyhWYWxpZGF0aW9uOjpjbGFzcykgPyAnY2FuQmVEaXNhYmxlZCcgOiAnY2FuQmVFbmFibGVkJ30oKQogICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2NhY2hlJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ2VuYWJsZV9hbm5vdGF0aW9ucycpLT57IWNsYXNzX2V4aXN0cyhGdWxsU3RhY2s6OmNsYXNzKSAmJiBjbGFzc19leGlzdHMoQW5ub3RhdGlvbjo6Y2xhc3MpID8gJ2RlZmF1bHRUcnVlJyA6ICdkZWZhdWx0RmFsc2UnfSgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnc3RhdGljX21ldGhvZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZShbJ2xvYWRWYWxpZGF0b3JNZXRhZGF0YSddKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ3NjYWxhcicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50cmVhdEZhbHNlTGlrZShbXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFsaWRhdGUoKS0+Y2FzdFRvQXJyYXkoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3RyYW5zbGF0aW9uX2RvbWFpbicpLT5kZWZhdWx0VmFsdWUoJ3ZhbGlkYXRvcnMnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbnVtTm9kZSgnZW1haWxfdmFsaWRhdGlvbl9tb2RlJyktPnZhbHVlcyhbJ2h0bWw1JywgJ2xvb3NlJywgJ3N0cmljdCddKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ21hcHBpbmcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hZGREZWZhdWx0c0lmTm90U2V0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdwYXRoJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdwYXRocycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ25vdF9jb21wcm9taXNlZF9wYXNzd29yZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNhbkJlRGlzYWJsZWQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnZW5hYmxlZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdFRydWUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1doZW4gZGlzYWJsZWQsIGNvbXByb21pc2VkIHBhc3N3b3JkcyB3aWxsIGJlIGFjY2VwdGVkIGFzIHZhbGlkLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZW5kcG9pbnQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHROdWxsKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdBUEkgZW5kcG9pbnQgZm9yIHRoZSBOb3RDb21wcm9taXNlZFBhc3N3b3JkIFZhbGlkYXRvci4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnYXV0b19tYXBwaW5nJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnQSBjb2xsZWN0aW9uIG9mIG5hbWVzcGFjZXMgZm9yIHdoaWNoIGF1dG8tbWFwcGluZyB3aWxsIGJlIGVuYWJsZWQgYnkgZGVmYXVsdCwgb3IgbnVsbCB0byBvcHQtaW4gd2l0aCB0aGUgRW5hYmxlQXV0b01hcHBpbmcgY29uc3RyYWludC4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5leGFtcGxlKFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQXBwXFxFbnRpdHlcXCcgPT4gW10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FwcFxcV2l0aFNwZWNpZmljTG9hZGVyc1xcJyA9PiBbJ3ZhbGlkYXRvci5wcm9wZXJ0eV9pbmZvX2xvYWRlciddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWVzcGFjZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPm5vcm1hbGl6ZUtleXMoZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZBcnJheSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKGZ1bmN0aW9uIChhcnJheSAkdmFsdWVzKTogYXJyYXkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkdmFsdWVzIGFzICRrID0+ICR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHZbJ3NlcnZpY2UnXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHZbJ25hbWVzcGFjZSddKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2YWx1ZXNbJGtdWydzZXJ2aWNlcyddID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFcaXNfYXJyYXkoJHYpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZhbHVlc1skdl1bJ3NlcnZpY2VzJ10gPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNldCgkdmFsdWVzWyRrXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRtcCA9ICR2OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zZXQoJHZhbHVlc1ska10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZhbHVlc1ska11bJ3NlcnZpY2VzJ10gPSAkdG1wOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHZhbHVlczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheVByb3RvdHlwZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ3NlcnZpY2UnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnc2VydmljZXMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ3NjYWxhcicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkQW5ub3RhdGlvbnNTZWN0aW9uKEFycmF5Tm9kZURlZmluaXRpb24gJHJvb3ROb2RlKQogICAgewogICAgICAgICRyb290Tm9kZQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdhbm5vdGF0aW9ucycpCiAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdhbm5vdGF0aW9uIGNvbmZpZ3VyYXRpb24nKQogICAgICAgICAgICAgICAgICAgIC0+e2NsYXNzX2V4aXN0cyhBbm5vdGF0aW9uOjpjbGFzcykgPyAnY2FuQmVEaXNhYmxlZCcgOiAnY2FuQmVFbmFibGVkJ30oKQogICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2NhY2hlJyktPmRlZmF1bHRWYWx1ZShpbnRlcmZhY2VfZXhpc3RzKENhY2hlOjpjbGFzcykgPyAncGhwX2FycmF5JyA6ICdub25lJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZmlsZV9jYWNoZV9kaXInKS0+ZGVmYXVsdFZhbHVlKCcla2VybmVsLmNhY2hlX2RpciUvYW5ub3RhdGlvbnMnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnZGVidWcnKS0+ZGVmYXVsdFZhbHVlKCR0aGlzLT5kZWJ1ZyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkU2VyaWFsaXplclNlY3Rpb24oQXJyYXlOb2RlRGVmaW5pdGlvbiAkcm9vdE5vZGUpCiAgICB7CiAgICAgICAgJHJvb3ROb2RlCiAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3NlcmlhbGl6ZXInKQogICAgICAgICAgICAgICAgICAgIC0+aW5mbygnc2VyaWFsaXplciBjb25maWd1cmF0aW9uJykKICAgICAgICAgICAgICAgICAgICAtPnshY2xhc3NfZXhpc3RzKEZ1bGxTdGFjazo6Y2xhc3MpICYmIGNsYXNzX2V4aXN0cyhTZXJpYWxpemVyOjpjbGFzcykgPyAnY2FuQmVEaXNhYmxlZCcgOiAnY2FuQmVFbmFibGVkJ30oKQogICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdlbmFibGVfYW5ub3RhdGlvbnMnKS0+eyFjbGFzc19leGlzdHMoRnVsbFN0YWNrOjpjbGFzcykgJiYgY2xhc3NfZXhpc3RzKEFubm90YXRpb246OmNsYXNzKSA/ICdkZWZhdWx0VHJ1ZScgOiAnZGVmYXVsdEZhbHNlJ30oKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCduYW1lX2NvbnZlcnRlcicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2NpcmN1bGFyX3JlZmVyZW5jZV9oYW5kbGVyJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnbWF4X2RlcHRoX2hhbmRsZXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ21hcHBpbmcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hZGREZWZhdWx0c0lmTm90U2V0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdwYXRoJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdwYXRocycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICA7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiBhZGRQcm9wZXJ0eUFjY2Vzc1NlY3Rpb24oQXJyYXlOb2RlRGVmaW5pdGlvbiAkcm9vdE5vZGUpCiAgICB7CiAgICAgICAgJHJvb3ROb2RlCiAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3Byb3BlcnR5X2FjY2VzcycpCiAgICAgICAgICAgICAgICAgICAgLT5hZGREZWZhdWx0c0lmTm90U2V0KCkKICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1Byb3BlcnR5IGFjY2VzcyBjb25maWd1cmF0aW9uJykKICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnbWFnaWNfY2FsbCcpLT5kZWZhdWx0RmFsc2UoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnbWFnaWNfZ2V0JyktPmRlZmF1bHRUcnVlKCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ21hZ2ljX3NldCcpLT5kZWZhdWx0VHJ1ZSgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCd0aHJvd19leGNlcHRpb25fb25faW52YWxpZF9pbmRleCcpLT5kZWZhdWx0RmFsc2UoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgndGhyb3dfZXhjZXB0aW9uX29uX2ludmFsaWRfcHJvcGVydHlfcGF0aCcpLT5kZWZhdWx0VHJ1ZSgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgIDsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGFkZFByb3BlcnR5SW5mb1NlY3Rpb24oQXJyYXlOb2RlRGVmaW5pdGlvbiAkcm9vdE5vZGUpCiAgICB7CiAgICAgICAgJHJvb3ROb2RlCiAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3Byb3BlcnR5X2luZm8nKQogICAgICAgICAgICAgICAgICAgIC0+aW5mbygnUHJvcGVydHkgaW5mbyBjb25maWd1cmF0aW9uJykKICAgICAgICAgICAgICAgICAgICAtPnshY2xhc3NfZXhpc3RzKEZ1bGxTdGFjazo6Y2xhc3MpICYmIGludGVyZmFjZV9leGlzdHMoUHJvcGVydHlJbmZvRXh0cmFjdG9ySW50ZXJmYWNlOjpjbGFzcykgPyAnY2FuQmVEaXNhYmxlZCcgOiAnY2FuQmVFbmFibGVkJ30oKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkQ2FjaGVTZWN0aW9uKEFycmF5Tm9kZURlZmluaXRpb24gJHJvb3ROb2RlKQogICAgewogICAgICAgICRyb290Tm9kZQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdjYWNoZScpCiAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdDYWNoZSBjb25maWd1cmF0aW9uJykKICAgICAgICAgICAgICAgICAgICAtPmFkZERlZmF1bHRzSWZOb3RTZXQoKQogICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdwb29sJykKICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdwcmVmaXhfc2VlZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1VzZWQgdG8gbmFtZXNwYWNlIGNhY2hlIGtleXMgd2hlbiB1c2luZyBzZXZlcmFsIGFwcHMgd2l0aCB0aGUgc2FtZSBzaGFyZWQgYmFja2VuZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZSgnXyVrZXJuZWwucHJvamVjdF9kaXIlLiVrZXJuZWwuY29udGFpbmVyX2NsYXNzJScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmV4YW1wbGUoJ215LWFwcGxpY2F0aW9uLW5hbWUvJWtlcm5lbC5lbnZpcm9ubWVudCUnKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnYXBwJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnQXBwIHJlbGF0ZWQgY2FjaGUgcG9vbHMgY29uZmlndXJhdGlvbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZSgnY2FjaGUuYWRhcHRlci5maWxlc3lzdGVtJykKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3N5c3RlbScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1N5c3RlbSByZWxhdGVkIGNhY2hlIHBvb2xzIGNvbmZpZ3VyYXRpb24nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VmFsdWUoJ2NhY2hlLmFkYXB0ZXIuc3lzdGVtJykKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2RpcmVjdG9yeScpLT5kZWZhdWx0VmFsdWUoJyVrZXJuZWwuY2FjaGVfZGlyJS9wb29scycpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2RlZmF1bHRfZG9jdHJpbmVfcHJvdmlkZXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdkZWZhdWx0X3BzcjZfcHJvdmlkZXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdkZWZhdWx0X3JlZGlzX3Byb3ZpZGVyJyktPmRlZmF1bHRWYWx1ZSgncmVkaXM6Ly9sb2NhbGhvc3QnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdkZWZhdWx0X21lbWNhY2hlZF9wcm92aWRlcicpLT5kZWZhdWx0VmFsdWUoJ21lbWNhY2hlZDovL2xvY2FsaG9zdCcpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2RlZmF1bHRfcGRvX3Byb3ZpZGVyJyktPmRlZmF1bHRWYWx1ZShjbGFzc19leGlzdHMoQ29ubmVjdGlvbjo6Y2xhc3MpID8gJ2RhdGFiYXNlX2Nvbm5lY3Rpb24nIDogbnVsbCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdwb29scycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdhcnJheScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ2FkYXB0ZXInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZUcnVlKGZ1bmN0aW9uICgkdikgeyByZXR1cm4gKGlzc2V0KCR2WydhZGFwdGVycyddKSB8fCBcaXNfYXJyYXkoJHZbJ2FkYXB0ZXInXSA/PyBudWxsKSkgJiYgaXNzZXQoJHZbJ3Byb3ZpZGVyJ10pOyB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW5JbnZhbGlkKCdQb29sIGNhbm5vdCBoYXZlIGEgInByb3ZpZGVyIiB3aGlsZSAiYWRhcHRlciIgaXMgc2V0IHRvIGEgbWFwJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdhZGFwdGVycycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnBlcmZvcm1Ob0RlZXBNZXJnaW5nKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnT25lIG9yIG1vcmUgYWRhcHRlcnMgdG8gY2hhaW4gZm9yIGNyZWF0aW5nIHRoZSBwb29sLCBkZWZhdWx0cyB0byAiY2FjaGUuYXBwIi4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFsd2F5cygpLT50aGVuKGZ1bmN0aW9uICgkdmFsdWVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbMF0gPT09IGFycmF5X2tleXMoJHZhbHVlcykgJiYgXGlzX2FycmF5KCR2YWx1ZXNbMF0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHZhbHVlc1swXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYWRhcHRlcnMgPSBbXTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR2YWx1ZXMgYXMgJGsgPT4gJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcaXNfaW50KCRrKSAmJiBcaXNfc3RyaW5nKCR2KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhZGFwdGVyc1tdID0gJHY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VpZiAoIVxpc19hcnJheSgkdikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYWRhcHRlcnNbJGtdID0gJHY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VpZiAoaXNzZXQoJHZbJ3Byb3ZpZGVyJ10pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFkYXB0ZXJzWyR2Wydwcm92aWRlciddXSA9ICR2WyduYW1lJ10gPz8gJHY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhZGFwdGVyc1tdID0gJHZbJ25hbWUnXSA/PyAkdjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRhZGFwdGVyczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ3NjYWxhcicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgndGFncycpLT5kZWZhdWx0TnVsbCgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdwdWJsaWMnKS0+ZGVmYXVsdEZhbHNlKCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZGVmYXVsdF9saWZldGltZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0RlZmF1bHQgbGlmZXRpbWUgb2YgdGhlIHBvb2wnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5leGFtcGxlKCciNjAwIiBmb3IgNSBtaW51dGVzIGV4cHJlc3NlZCBpbiBzZWNvbmRzLCAiUFQ1TSIgZm9yIGZpdmUgbWludXRlcyBleHByZXNzZWQgYXMgSVNPIDg2MDEgdGltZSBpbnRlcnZhbCwgb3IgIjUgbWludXRlcyIgYXMgYSBkYXRlIGV4cHJlc3Npb24nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgncHJvdmlkZXInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdPdmVyd3JpdGUgdGhlIHNldHRpbmcgZnJvbSB0aGUgZGVmYXVsdCBwcm92aWRlciBmb3IgdGhpcyBhZGFwdGVyLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdlYXJseV9leHBpcmF0aW9uX21lc3NhZ2VfYnVzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZXhhbXBsZSgnIm1lc3Nlbmdlci5kZWZhdWx0X2J1cyIgdG8gc2VuZCBlYXJseSBleHBpcmF0aW9uIGV2ZW50cyB0byB0aGUgZGVmYXVsdCBNZXNzZW5nZXIgYnVzLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdjbGVhcmVyJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT52YWxpZGF0ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pZlRydWUoZnVuY3Rpb24gKCR2KSB7IHJldHVybiBpc3NldCgkdlsnY2FjaGUuYXBwJ10pIHx8IGlzc2V0KCR2WydjYWNoZS5zeXN0ZW0nXSk7IH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuSW52YWxpZCgnImNhY2hlLmFwcCIgYW5kICJjYWNoZS5zeXN0ZW0iIGFyZSByZXNlcnZlZCBuYW1lcycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICA7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiBhZGRQaHBFcnJvcnNTZWN0aW9uKEFycmF5Tm9kZURlZmluaXRpb24gJHJvb3ROb2RlKQogICAgewogICAgICAgICRyb290Tm9kZQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdwaHBfZXJyb3JzJykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1BIUCBlcnJvcnMgaGFuZGxpbmcgY29uZmlndXJhdGlvbicpCiAgICAgICAgICAgICAgICAgICAgLT5hZGREZWZhdWx0c0lmTm90U2V0KCkKICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdsb2cnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdVc2UgdGhlIGFwcGxpY2F0aW9uIGxvZ2dlciBpbnN0ZWFkIG9mIHRoZSBQSFAgbG9nZ2VyIGZvciBsb2dnaW5nIFBIUCBlcnJvcnMuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZXhhbXBsZSgnInRydWUiIHRvIHVzZSB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uOiBsb2cgYWxsIGVycm9ycy4gImZhbHNlIiB0byBkaXNhYmxlLiBBbiBpbnRlZ2VyIGJpdCBmaWVsZCBvZiBFXyogY29uc3RhbnRzLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZSgkdGhpcy0+ZGVidWcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRyZWF0TnVsbExpa2UoJHRoaXMtPmRlYnVnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT52YWxpZGF0ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pZlRydWUoZnVuY3Rpb24gKCR2KSB7IHJldHVybiAhKFxpc19pbnQoJHYpIHx8IFxpc19ib29sKCR2KSk7IH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuSW52YWxpZCgnVGhlICJwaHBfZXJyb3JzLmxvZyIgcGFyYW1ldGVyIHNob3VsZCBiZSBlaXRoZXIgYW4gaW50ZWdlciBvciBhIGJvb2xlYW4uJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCd0aHJvdycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1Rocm93IFBIUCBlcnJvcnMgYXMgXEVycm9yRXhjZXB0aW9uIGluc3RhbmNlcy4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VmFsdWUoJHRoaXMtPmRlYnVnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50cmVhdE51bGxMaWtlKCR0aGlzLT5kZWJ1ZykKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgIDsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGFkZExvY2tTZWN0aW9uKEFycmF5Tm9kZURlZmluaXRpb24gJHJvb3ROb2RlKQogICAgewogICAgICAgICRyb290Tm9kZQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdsb2NrJykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0xvY2sgY29uZmlndXJhdGlvbicpCiAgICAgICAgICAgICAgICAgICAgLT57IWNsYXNzX2V4aXN0cyhGdWxsU3RhY2s6OmNsYXNzKSAmJiBjbGFzc19leGlzdHMoTG9jazo6Y2xhc3MpID8gJ2NhbkJlRGlzYWJsZWQnIDogJ2NhbkJlRW5hYmxlZCd9KCkKICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAtPmlmU3RyaW5nKCktPnRoZW4oZnVuY3Rpb24gKCR2KSB7IHJldHVybiBbJ2VuYWJsZWQnID0+IHRydWUsICdyZXNvdXJjZXMnID0+ICR2XTsgfSkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5pZlRydWUoZnVuY3Rpb24gKCR2KSB7IHJldHVybiBcaXNfYXJyYXkoJHYpICYmICFpc3NldCgkdlsnZW5hYmxlZCddKTsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKGZ1bmN0aW9uICgkdikgeyByZXR1cm4gJHYgKyBbJ2VuYWJsZWQnID0+IHRydWVdOyB9KQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShmdW5jdGlvbiAoJHYpIHsgcmV0dXJuIFxpc19hcnJheSgkdikgJiYgIWlzc2V0KCR2WydyZXNvdXJjZXMnXSkgJiYgIWlzc2V0KCR2WydyZXNvdXJjZSddKTsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUgPSAkdlsnZW5hYmxlZCddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zZXQoJHZbJ2VuYWJsZWQnXSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsnZW5hYmxlZCcgPT4gJGUsICdyZXNvdXJjZXMnID0+ICR2XTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5hZGREZWZhdWx0c0lmTm90U2V0KCkKICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygncmVzb3VyY2UnKQogICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgncmVzb3VyY2VzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cmVxdWlyZXNBdExlYXN0T25lRWxlbWVudCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZShbJ2RlZmF1bHQnID0+IFtjbGFzc19leGlzdHMoU2VtYXBob3JlU3RvcmU6OmNsYXNzKSAmJiBTZW1hcGhvcmVTdG9yZTo6aXNTdXBwb3J0ZWQoKSA/ICdzZW1hcGhvcmUnIDogJ2Zsb2NrJ11dKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmU3RyaW5nKCktPnRoZW4oZnVuY3Rpb24gKCR2KSB7IHJldHVybiBbJ2RlZmF1bHQnID0+ICR2XTsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pZlRydWUoZnVuY3Rpb24gKCR2KSB7IHJldHVybiBcaXNfYXJyYXkoJHYpICYmIGFycmF5X2tleXMoJHYpID09PSByYW5nZSgwLCBcY291bnQoJHYpIC0gMSk7IH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVzb3VyY2VzID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR2IGFzICRyZXNvdXJjZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlc291cmNlcyA9IGFycmF5X21lcmdlX3JlY3Vyc2l2ZSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVzb3VyY2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxpc19hcnJheSgkcmVzb3VyY2UpICYmIGlzc2V0KCRyZXNvdXJjZVsnbmFtZSddKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFskcmVzb3VyY2VbJ25hbWUnXSA9PiAkcmVzb3VyY2VbJ3ZhbHVlJ11dCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogWydkZWZhdWx0JyA9PiAkcmVzb3VyY2VdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHJlc291cmNlczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ2FycmF5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKS0+aWZTdHJpbmcoKS0+dGhlbihmdW5jdGlvbiAoJHYpIHsgcmV0dXJuIFskdl07IH0pLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgIDsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGFkZFdlYkxpbmtTZWN0aW9uKEFycmF5Tm9kZURlZmluaXRpb24gJHJvb3ROb2RlKQogICAgewogICAgICAgICRyb290Tm9kZQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCd3ZWJfbGluaycpCiAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCd3ZWIgbGlua3MgY29uZmlndXJhdGlvbicpCiAgICAgICAgICAgICAgICAgICAgLT57IWNsYXNzX2V4aXN0cyhGdWxsU3RhY2s6OmNsYXNzKSAmJiBjbGFzc19leGlzdHMoSHR0cEhlYWRlclNlcmlhbGl6ZXI6OmNsYXNzKSA/ICdjYW5CZURpc2FibGVkJyA6ICdjYW5CZUVuYWJsZWQnfSgpCiAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICA7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiBhZGRNZXNzZW5nZXJTZWN0aW9uKEFycmF5Tm9kZURlZmluaXRpb24gJHJvb3ROb2RlKQogICAgewogICAgICAgICRyb290Tm9kZQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdtZXNzZW5nZXInKQogICAgICAgICAgICAgICAgICAgIC0+aW5mbygnTWVzc2VuZ2VyIGNvbmZpZ3VyYXRpb24nKQogICAgICAgICAgICAgICAgICAgIC0+eyFjbGFzc19leGlzdHMoRnVsbFN0YWNrOjpjbGFzcykgJiYgaW50ZXJmYWNlX2V4aXN0cyhNZXNzYWdlQnVzSW50ZXJmYWNlOjpjbGFzcykgPyAnY2FuQmVEaXNhYmxlZCcgOiAnY2FuQmVFbmFibGVkJ30oKQogICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCd0cmFuc3BvcnQnKQogICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdidXMnLCAnYnVzZXMnKQogICAgICAgICAgICAgICAgICAgIC0+dmFsaWRhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShmdW5jdGlvbiAoJHYpIHsgcmV0dXJuIGlzc2V0KCR2WydidXNlcyddKSAmJiBcY291bnQoJHZbJ2J1c2VzJ10pID4gMSAmJiBudWxsID09PSAkdlsnZGVmYXVsdF9idXMnXTsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuSW52YWxpZCgnWW91IG11c3Qgc3BlY2lmeSB0aGUgImRlZmF1bHRfYnVzIiBpZiB5b3UgZGVmaW5lIG1vcmUgdGhhbiBvbmUgYnVzLicpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+dmFsaWRhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShzdGF0aWMgZnVuY3Rpb24gKCR2KTogYm9vbCB7IHJldHVybiBpc3NldCgkdlsnYnVzZXMnXSkgJiYgbnVsbCAhPT0gJHZbJ2RlZmF1bHRfYnVzJ10gJiYgIWlzc2V0KCR2WydidXNlcyddWyR2WydkZWZhdWx0X2J1cyddXSk7IH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbihzdGF0aWMgZnVuY3Rpb24gKGFycmF5ICR2KTogdm9pZCB7IHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbkV4Y2VwdGlvbihzcHJpbnRmKCdUaGUgc3BlY2lmaWVkIGRlZmF1bHQgYnVzICIlcyIgaXMgbm90IGNvbmZpZ3VyZWQuIEF2YWlsYWJsZSBidXNlcyBhcmUgIiVzIi4nLCAkdlsnZGVmYXVsdF9idXMnXSwgaW1wbG9kZSgnIiwgIicsIGFycmF5X2tleXMoJHZbJ2J1c2VzJ10pKSkpOyB9KQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3JvdXRpbmcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5ub3JtYWxpemVLZXlzKGZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgnbWVzc2FnZV9jbGFzcycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YWx3YXlzKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW4oZnVuY3Rpb24gKCRjb25maWcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFcaXNfYXJyYXkoJGNvbmZpZykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBYTUwgY29uZmlnIHdpdGggb25seSBvbmUgcm91dGluZyBhdHRyaWJ1dGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDIgPT09IFxjb3VudCgkY29uZmlnKSAmJiBpc3NldCgkY29uZmlnWydtZXNzYWdlLWNsYXNzJ10pICYmIGlzc2V0KCRjb25maWdbJ3NlbmRlciddKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbmZpZyA9IFswID0+ICRjb25maWddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbmV3Q29uZmlnID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRjb25maWcgYXMgJGsgPT4gJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghXGlzX2ludCgkaykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbmV3Q29uZmlnWyRrXSA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbmRlcnMnID0+ICR2WydzZW5kZXJzJ10gPz8gKFxpc19hcnJheSgkdikgPyBhcnJheV92YWx1ZXMoJHYpIDogWyR2XSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG5ld0NvbmZpZ1skdlsnbWVzc2FnZS1jbGFzcyddXVsnc2VuZGVycyddID0gYXJyYXlfbWFwKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcaXNfc3RyaW5nKCRhKSA/ICRhIDogJGFbJ3NlcnZpY2UnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlfdmFsdWVzKCR2WydzZW5kZXInXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJG5ld0NvbmZpZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ2FycmF5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnBlcmZvcm1Ob0RlZXBNZXJnaW5nKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3NlbmRlcnMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5yZXF1aXJlc0F0TGVhc3RPbmVFbGVtZW50KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnc2VyaWFsaXplcicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFkZERlZmF1bHRzSWZOb3RTZXQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdkZWZhdWx0X3NlcmlhbGl6ZXInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZSgnbWVzc2VuZ2VyLnRyYW5zcG9ydC5uYXRpdmVfcGhwX3NlcmlhbGl6ZXInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1NlcnZpY2UgaWQgdG8gdXNlIGFzIHRoZSBkZWZhdWx0IHNlcmlhbGl6ZXIgZm9yIHRoZSB0cmFuc3BvcnRzLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdzeW1mb255X3NlcmlhbGl6ZXInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFkZERlZmF1bHRzSWZOb3RTZXQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZm9ybWF0JyktPmRlZmF1bHRWYWx1ZSgnanNvbicpLT5pbmZvKCdTZXJpYWxpemF0aW9uIGZvcm1hdCBmb3IgdGhlIG1lc3Nlbmdlci50cmFuc3BvcnQuc3ltZm9ueV9zZXJpYWxpemVyIHNlcnZpY2UgKHdoaWNoIGlzIG5vdCB0aGUgc2VyaWFsaXplciB1c2VkIGJ5IGRlZmF1bHQpLicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2NvbnRleHQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+bm9ybWFsaXplS2V5cyhmYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZShbXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0NvbnRleHQgYXJyYXkgZm9yIHRoZSBtZXNzZW5nZXIudHJhbnNwb3J0LnN5bWZvbnlfc2VyaWFsaXplciBzZXJ2aWNlICh3aGljaCBpcyBub3QgdGhlIHNlcmlhbGl6ZXIgdXNlZCBieSBkZWZhdWx0KS4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCd2YXJpYWJsZScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCd0cmFuc3BvcnRzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+bm9ybWFsaXplS2V5cyhmYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheVByb3RvdHlwZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pZlN0cmluZygpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbihmdW5jdGlvbiAoc3RyaW5nICRkc24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbJ2RzbicgPT4gJGRzbl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdvcHRpb24nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2RzbicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3NlcmlhbGl6ZXInKS0+ZGVmYXVsdE51bGwoKS0+aW5mbygnU2VydmljZSBpZCBvZiBhIGN1c3RvbSBzZXJpYWxpemVyIHRvIHVzZS4nKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ29wdGlvbnMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5ub3JtYWxpemVLZXlzKGZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VmFsdWUoW10pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgndmFyaWFibGUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdyZXRyeV9zdHJhdGVneScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFkZERlZmF1bHRzSWZOb3RTZXQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFsd2F5cyhmdW5jdGlvbiAoJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCR2WydzZXJ2aWNlJ10pICYmIChpc3NldCgkdlsnbWF4X3JldHJpZXMnXSkgfHwgaXNzZXQoJHZbJ2RlbGF5J10pIHx8IGlzc2V0KCR2WydtdWx0aXBsaWVyJ10pIHx8IGlzc2V0KCR2WydtYXhfZGVsYXknXSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgXEludmFsaWRBcmd1bWVudEV4Y2VwdGlvbignVGhlICJzZXJ2aWNlIiBjYW5ub3QgYmUgdXNlZCBhbG9uZyB3aXRoIHRoZSBvdGhlciAicmV0cnlfc3RyYXRlZ3kiIG9wdGlvbnMuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkdjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdzZXJ2aWNlJyktPmRlZmF1bHROdWxsKCktPmluZm8oJ1NlcnZpY2UgaWQgdG8gb3ZlcnJpZGUgdGhlIHJldHJ5IHN0cmF0ZWd5IGVudGlyZWx5JyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbnRlZ2VyTm9kZSgnbWF4X3JldHJpZXMnKS0+ZGVmYXVsdFZhbHVlKDMpLT5taW4oMCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbnRlZ2VyTm9kZSgnZGVsYXknKS0+ZGVmYXVsdFZhbHVlKDEwMDApLT5taW4oMCktPmluZm8oJ1RpbWUgaW4gbXMgdG8gZGVsYXkgKG9yIHRoZSBpbml0aWFsIHZhbHVlIHdoZW4gbXVsdGlwbGllciBpcyB1c2VkKScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZmxvYXROb2RlKCdtdWx0aXBsaWVyJyktPmRlZmF1bHRWYWx1ZSgyKS0+bWluKDEpLT5pbmZvKCdJZiBncmVhdGVyIHRoYW4gMSwgZGVsYXkgd2lsbCBncm93IGV4cG9uZW50aWFsbHkgZm9yIGVhY2ggcmV0cnk6IHRoaXMgZGVsYXkgPSAoZGVsYXkgKiAobXVsdGlwbGUgXiByZXRyaWVzKSknKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmludGVnZXJOb2RlKCdtYXhfZGVsYXknKS0+ZGVmYXVsdFZhbHVlKDApLT5taW4oMCktPmluZm8oJ01heCB0aW1lIGluIG1zIHRoYXQgYSByZXRyeSBzaG91bGQgZXZlciBiZSBkZWxheWVkICgwID0gaW5maW5pdGUpJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdmYWlsdXJlX3RyYW5zcG9ydCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHROdWxsKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnVHJhbnNwb3J0IG5hbWUgdG8gc2VuZCBmYWlsZWQgbWVzc2FnZXMgdG8gKGFmdGVyIGFsbCByZXRyaWVzIGhhdmUgZmFpbGVkKS4nKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnZGVmYXVsdF9idXMnKS0+ZGVmYXVsdE51bGwoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2J1c2VzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdFZhbHVlKFsnbWVzc2VuZ2VyLmJ1cy5kZWZhdWx0JyA9PiBbJ2RlZmF1bHRfbWlkZGxld2FyZScgPT4gdHJ1ZSwgJ21pZGRsZXdhcmUnID0+IFtdXV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPm5vcm1hbGl6ZUtleXMoZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlQcm90b3R5cGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YWRkRGVmYXVsdHNJZk5vdFNldCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW51bU5vZGUoJ2RlZmF1bHRfbWlkZGxld2FyZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnZhbHVlcyhbdHJ1ZSwgZmFsc2UsICdhbGxvd19ub19oYW5kbGVycyddKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VHJ1ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ21pZGRsZXdhcmUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wZXJmb3JtTm9EZWVwTWVyZ2luZygpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZUcnVlKGZ1bmN0aW9uICgkdikgeyByZXR1cm4gXGlzX3N0cmluZygkdikgfHwgKFxpc19hcnJheSgkdikgJiYgIVxpc19pbnQoa2V5KCR2KSkpOyB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbihmdW5jdGlvbiAoJHYpIHsgcmV0dXJuIFskdl07IH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZShbXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlQcm90b3R5cGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YWx3YXlzKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKGZ1bmN0aW9uICgkbWlkZGxld2FyZSk6IGFycmF5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghXGlzX2FycmF5KCRtaWRkbGV3YXJlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbJ2lkJyA9PiAkbWlkZGxld2FyZV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJG1pZGRsZXdhcmVbJ2lkJ10pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRtaWRkbGV3YXJlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPCBcY291bnQoJG1pZGRsZXdhcmUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFxJbnZhbGlkQXJndW1lbnRFeGNlcHRpb24oJ0ludmFsaWQgbWlkZGxld2FyZSBhdCBwYXRoICJmcmFtZXdvcmsubWVzc2VuZ2VyIjogYSBtYXAgd2l0aCBhIHNpbmdsZSBmYWN0b3J5IGlkIGFzIGtleSBhbmQgaXRzIGFyZ3VtZW50cyBhcyB2YWx1ZSB3YXMgZXhwZWN0ZWQsICcuanNvbl9lbmNvZGUoJG1pZGRsZXdhcmUpLicgZ2l2ZW4uJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWQnID0+IGtleSgkbWlkZGxld2FyZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FyZ3VtZW50cycgPT4gY3VycmVudCgkbWlkZGxld2FyZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnYXJndW1lbnQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2lkJyktPmlzUmVxdWlyZWQoKS0+Y2Fubm90QmVFbXB0eSgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnYXJndW1lbnRzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+bm9ybWFsaXplS2V5cyhmYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZGVmYXVsdFZhbHVlKFtdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ3ZhcmlhYmxlJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgIDsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGFkZFJvYm90c0luZGV4U2VjdGlvbihBcnJheU5vZGVEZWZpbml0aW9uICRyb290Tm9kZSkKICAgIHsKICAgICAgICAkcm9vdE5vZGUKICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAtPmJvb2xlYW5Ob2RlKCdkaXNhbGxvd19zZWFyY2hfZW5naW5lX2luZGV4JykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0VuYWJsZWQgYnkgZGVmYXVsdCB3aGVuIGRlYnVnIGlzIGVuYWJsZWQuJykKICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHRWYWx1ZSgkdGhpcy0+ZGVidWcpCiAgICAgICAgICAgICAgICAgICAgLT50cmVhdE51bGxMaWtlKCR0aGlzLT5kZWJ1ZykKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgIDsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGFkZEh0dHBDbGllbnRTZWN0aW9uKEFycmF5Tm9kZURlZmluaXRpb24gJHJvb3ROb2RlKQogICAgewogICAgICAgICRyb290Tm9kZQogICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdodHRwX2NsaWVudCcpCiAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdIVFRQIENsaWVudCBjb25maWd1cmF0aW9uJykKICAgICAgICAgICAgICAgICAgICAtPnshY2xhc3NfZXhpc3RzKEZ1bGxTdGFjazo6Y2xhc3MpICYmIGNsYXNzX2V4aXN0cyhIdHRwQ2xpZW50OjpjbGFzcykgPyAnY2FuQmVEaXNhYmxlZCcgOiAnY2FuQmVFbmFibGVkJ30oKQogICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdzY29wZWRfY2xpZW50JykKICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFsd2F5cyhmdW5jdGlvbiAoJGNvbmZpZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVtcHR5KCRjb25maWdbJ3Njb3BlZF9jbGllbnRzJ10pIHx8ICFcaXNfYXJyYXkoJGNvbmZpZ1snZGVmYXVsdF9vcHRpb25zJ11bJ3JldHJ5X2ZhaWxlZCddID8/IG51bGwpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRjb25maWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGNvbmZpZ1snc2NvcGVkX2NsaWVudHMnXSBhcyAmJHNjb3BlZENvbmZpZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNzZXQoJHNjb3BlZENvbmZpZ1sncmV0cnlfZmFpbGVkJ10pIHx8IHRydWUgPT09ICRzY29wZWRDb25maWdbJ3JldHJ5X2ZhaWxlZCddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZWRDb25maWdbJ3JldHJ5X2ZhaWxlZCddID0gJGNvbmZpZ1snZGVmYXVsdF9vcHRpb25zJ11bJ3JldHJ5X2ZhaWxlZCddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxpc19hcnJheSgkc2NvcGVkQ29uZmlnWydyZXRyeV9mYWlsZWQnXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlZENvbmZpZ1sncmV0cnlfZmFpbGVkJ10gPSAkc2NvcGVkQ29uZmlnWydyZXRyeV9mYWlsZWQnXSArICRjb25maWdbJ2RlZmF1bHRfb3B0aW9ucyddWydyZXRyeV9mYWlsZWQnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRjb25maWc7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAtPmludGVnZXJOb2RlKCdtYXhfaG9zdF9jb25uZWN0aW9ucycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1RoZSBtYXhpbXVtIG51bWJlciBvZiBjb25uZWN0aW9ucyB0byBhIHNpbmdsZSBob3N0LicpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2RlZmF1bHRfb3B0aW9ucycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnaGVhZGVyJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdoZWFkZXJzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdBc3NvY2lhdGl2ZSBhcnJheTogaGVhZGVyID0+IHZhbHVlKHMpLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dXNlQXR0cmlidXRlQXNLZXkoJ25hbWUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPm5vcm1hbGl6ZUtleXMoZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFyaWFibGVQcm90b3R5cGUoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbnRlZ2VyTm9kZSgnbWF4X3JlZGlyZWN0cycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlZGlyZWN0cyB0byBmb2xsb3cuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdodHRwX3ZlcnNpb24nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1RoZSBkZWZhdWx0IEhUVFAgdmVyc2lvbiwgdHlwaWNhbGx5IDEuMSBvciAyLjAsIGxlYXZlIHRvIG51bGwgZm9yIHRoZSBiZXN0IHZlcnNpb24uJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3Jlc29sdmUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0Fzc29jaWF0aXZlIGFycmF5OiBkb21haW4gPT4gSVAuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgnaG9zdCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFsd2F5cyhmdW5jdGlvbiAoJGNvbmZpZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghXGlzX2FycmF5KCRjb25maWcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc3NldCgkY29uZmlnWydob3N0J10sICRjb25maWdbJ3ZhbHVlJ10pIHx8IFxjb3VudCgkY29uZmlnKSA+IDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRjb25maWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyRjb25maWdbJ2hvc3QnXSA9PiAkY29uZmlnWyd2YWx1ZSddXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5ub3JtYWxpemVLZXlzKGZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhclByb3RvdHlwZSgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3Byb3h5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdUaGUgVVJMIG9mIHRoZSBwcm94eSB0byBwYXNzIHJlcXVlc3RzIHRocm91Z2ggb3IgbnVsbCBmb3IgYXV0b21hdGljIGRldGVjdGlvbi4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ25vX3Byb3h5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdBIGNvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIGhvc3RzIHRoYXQgZG8gbm90IHJlcXVpcmUgYSBwcm94eSB0byBiZSByZWFjaGVkLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZmxvYXROb2RlKCd0aW1lb3V0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdUaGUgaWRsZSB0aW1lb3V0LCBkZWZhdWx0cyB0byB0aGUgImRlZmF1bHRfc29ja2V0X3RpbWVvdXQiIGluaSBwYXJhbWV0ZXIuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5mbG9hdE5vZGUoJ21heF9kdXJhdGlvbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnVGhlIG1heGltdW0gZXhlY3V0aW9uIHRpbWUgZm9yIHRoZSByZXF1ZXN0K3Jlc3BvbnNlIGFzIGEgd2hvbGUuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdiaW5kdG8nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0EgbmV0d29yayBpbnRlcmZhY2UgbmFtZSwgSVAgYWRkcmVzcywgYSBob3N0IG5hbWUgb3IgYSBVTklYIHNvY2tldCB0byBiaW5kIHRvLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ3ZlcmlmeV9wZWVyJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdJbmRpY2F0ZXMgaWYgdGhlIHBlZXIgc2hvdWxkIGJlIHZlcmlmaWVkIGluIGEgU1NML1RMUyBjb250ZXh0LicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Ym9vbGVhbk5vZGUoJ3ZlcmlmeV9ob3N0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdJbmRpY2F0ZXMgaWYgdGhlIGhvc3Qgc2hvdWxkIGV4aXN0IGFzIGEgY2VydGlmaWNhdGUgY29tbW9uIG5hbWUuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdjYWZpbGUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0EgY2VydGlmaWNhdGUgYXV0aG9yaXR5IGZpbGUuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdjYXBhdGgnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0EgZGlyZWN0b3J5IHRoYXQgY29udGFpbnMgbXVsdGlwbGUgY2VydGlmaWNhdGUgYXV0aG9yaXR5IGZpbGVzLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnbG9jYWxfY2VydCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnQSBQRU0gZm9ybWF0dGVkIGNlcnRpZmljYXRlIGZpbGUuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdsb2NhbF9waycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnQSBwcml2YXRlIGtleSBmaWxlLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgncGFzc3BocmFzZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnVGhlIHBhc3NwaHJhc2UgdXNlZCB0byBlbmNyeXB0IHRoZSAibG9jYWxfcGsiIGZpbGUuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdjaXBoZXJzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdBIGxpc3Qgb2YgU1NML1RMUyBjaXBoZXJzIHNlcGFyYXRlZCBieSBjb2xvbnMsIGNvbW1hcyBvciBzcGFjZXMgKGUuZy4gIlJDMy1TSEE6VExTMTMtQUVTLTEyOC1HQ00tU0hBMjU2Ii4uLiknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgncGVlcl9maW5nZXJwcmludCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnQXNzb2NpYXRpdmUgYXJyYXk6IGhhc2hpbmcgYWxnb3JpdGhtID0+IGhhc2goZXMpLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+bm9ybWFsaXplS2V5cyhmYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnZhcmlhYmxlTm9kZSgnc2hhMScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT52YXJpYWJsZU5vZGUoJ3Bpbi1zaGEyNTYnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFyaWFibGVOb2RlKCdtZDUnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFwcGVuZCgkdGhpcy0+YWRkSHR0cENsaWVudFJldHJ5U2VjdGlvbigpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnbW9ja19yZXNwb25zZV9mYWN0b3J5JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnVGhlIGlkIG9mIHRoZSBzZXJ2aWNlIHRoYXQgc2hvdWxkIGdlbmVyYXRlIG1vY2sgcmVzcG9uc2VzLiBJdCBzaG91bGQgYmUgZWl0aGVyIGFuIGludm9rYWJsZSBvciBhbiBpdGVyYWJsZS4nKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdzY29wZWRfY2xpZW50cycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+bm9ybWFsaXplS2V5cyhmYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlQcm90b3R5cGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdoZWFkZXInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YWx3YXlzKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKGZ1bmN0aW9uICgkY29uZmlnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNsYXNzX2V4aXN0cyhIdHRwQ2xpZW50OjpjbGFzcykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTG9naWNFeGNlcHRpb24oJ0h0dHBDbGllbnQgc3VwcG9ydCBjYW5ub3QgYmUgZW5hYmxlZCBhcyB0aGUgY29tcG9uZW50IGlzIG5vdCBpbnN0YWxsZWQuIFRyeSBydW5uaW5nICJjb21wb3NlciByZXF1aXJlIHN5bWZvbnkvaHR0cC1jbGllbnQiLicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcaXNfYXJyYXkoJGNvbmZpZykgPyAkY29uZmlnIDogWydiYXNlX3VyaScgPT4gJGNvbmZpZ107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFsaWRhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShmdW5jdGlvbiAoJHYpIHsgcmV0dXJuICFpc3NldCgkdlsnc2NvcGUnXSkgJiYgIWlzc2V0KCR2WydiYXNlX3VyaSddKTsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuSW52YWxpZCgnRWl0aGVyICJzY29wZSIgb3IgImJhc2VfdXJpIiBzaG91bGQgYmUgZGVmaW5lZC4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnZhbGlkYXRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pZlRydWUoZnVuY3Rpb24gKCR2KSB7IHJldHVybiAhZW1wdHkoJHZbJ3F1ZXJ5J10pICYmICFpc3NldCgkdlsnYmFzZV91cmknXSk7IH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbkludmFsaWQoJyJxdWVyeSIgYXBwbGllcyB0byAiYmFzZV91cmkiIGJ1dCBubyBiYXNlIFVSSSBpcyBkZWZpbmVkLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ3Njb3BlJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IHRoZSByZXF1ZXN0IFVSTCBtdXN0IG1hdGNoIGJlZm9yZSBhZGRpbmcgdGhlIG90aGVyIG9wdGlvbnMuIFdoZW4gbm9uZSBpcyBwcm92aWRlZCwgdGhlIGJhc2UgVVJJIGlzIHVzZWQgaW5zdGVhZC4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jYW5ub3RCZUVtcHR5KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2Jhc2VfdXJpJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnVGhlIFVSSSB0byByZXNvbHZlIHJlbGF0aXZlIFVSTHMsIGZvbGxvd2luZyBydWxlcyBpbiBSRkMgMzk4NSwgc2VjdGlvbiAyLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNhbm5vdEJlRW1wdHkoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnYXV0aF9iYXNpYycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0FuIEhUVFAgQmFzaWMgYXV0aGVudGljYXRpb24gInVzZXJuYW1lOnBhc3N3b3JkIi4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnYXV0aF9iZWFyZXInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdBIHRva2VuIGVuYWJsaW5nIEhUVFAgQmVhcmVyIGF1dGhvcml6YXRpb24uJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2F1dGhfbnRsbScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0EgInVzZXJuYW1lOnBhc3N3b3JkIiBwYWlyIHRvIHVzZSBNaWNyb3NvZnQgTlRMTSBhdXRoZW50aWNhdGlvbiAocmVxdWlyZXMgdGhlIGNVUkwgZXh0ZW5zaW9uKS4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdxdWVyeScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0Fzc29jaWF0aXZlIGFycmF5IG9mIHF1ZXJ5IHN0cmluZyB2YWx1ZXMgbWVyZ2VkIHdpdGggdGhlIGJhc2UgVVJJLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCdrZXknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFsd2F5cyhmdW5jdGlvbiAoJGNvbmZpZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIVxpc19hcnJheSgkY29uZmlnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNzZXQoJGNvbmZpZ1sna2V5J10sICRjb25maWdbJ3ZhbHVlJ10pIHx8IFxjb3VudCgkY29uZmlnKSA+IDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkY29uZmlnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyRjb25maWdbJ2tleSddID0+ICRjb25maWdbJ3ZhbHVlJ11dOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPm5vcm1hbGl6ZUtleXMoZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhclByb3RvdHlwZSgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdoZWFkZXJzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnQXNzb2NpYXRpdmUgYXJyYXk6IGhlYWRlciA9PiB2YWx1ZShzKS4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgnbmFtZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPm5vcm1hbGl6ZUtleXMoZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnZhcmlhYmxlUHJvdG90eXBlKCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbnRlZ2VyTm9kZSgnbWF4X3JlZGlyZWN0cycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1RoZSBtYXhpbXVtIG51bWJlciBvZiByZWRpcmVjdHMgdG8gZm9sbG93LicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdodHRwX3ZlcnNpb24nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdUaGUgZGVmYXVsdCBIVFRQIHZlcnNpb24sIHR5cGljYWxseSAxLjEgb3IgMi4wLCBsZWF2ZSB0byBudWxsIGZvciB0aGUgYmVzdCB2ZXJzaW9uLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3Jlc29sdmUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdBc3NvY2lhdGl2ZSBhcnJheTogZG9tYWluID0+IElQLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCdob3N0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5hbHdheXMoZnVuY3Rpb24gKCRjb25maWcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFcaXNfYXJyYXkoJGNvbmZpZykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzc2V0KCRjb25maWdbJ2hvc3QnXSwgJGNvbmZpZ1sndmFsdWUnXSkgfHwgXGNvdW50KCRjb25maWcpID4gMikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRjb25maWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbJGNvbmZpZ1snaG9zdCddID0+ICRjb25maWdbJ3ZhbHVlJ11dOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPm5vcm1hbGl6ZUtleXMoZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhclByb3RvdHlwZSgpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgncHJveHknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdUaGUgVVJMIG9mIHRoZSBwcm94eSB0byBwYXNzIHJlcXVlc3RzIHRocm91Z2ggb3IgbnVsbCBmb3IgYXV0b21hdGljIGRldGVjdGlvbi4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnbm9fcHJveHknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdBIGNvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIGhvc3RzIHRoYXQgZG8gbm90IHJlcXVpcmUgYSBwcm94eSB0byBiZSByZWFjaGVkLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5mbG9hdE5vZGUoJ3RpbWVvdXQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdUaGUgaWRsZSB0aW1lb3V0LCBkZWZhdWx0cyB0byB0aGUgImRlZmF1bHRfc29ja2V0X3RpbWVvdXQiIGluaSBwYXJhbWV0ZXIuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmZsb2F0Tm9kZSgnbWF4X2R1cmF0aW9uJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnVGhlIG1heGltdW0gZXhlY3V0aW9uIHRpbWUgZm9yIHRoZSByZXF1ZXN0K3Jlc3BvbnNlIGFzIGEgd2hvbGUuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2JpbmR0bycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0EgbmV0d29yayBpbnRlcmZhY2UgbmFtZSwgSVAgYWRkcmVzcywgYSBob3N0IG5hbWUgb3IgYSBVTklYIHNvY2tldCB0byBiaW5kIHRvLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgndmVyaWZ5X3BlZXInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdJbmRpY2F0ZXMgaWYgdGhlIHBlZXIgc2hvdWxkIGJlIHZlcmlmaWVkIGluIGEgU1NML1RMUyBjb250ZXh0LicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgndmVyaWZ5X2hvc3QnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdJbmRpY2F0ZXMgaWYgdGhlIGhvc3Qgc2hvdWxkIGV4aXN0IGFzIGEgY2VydGlmaWNhdGUgY29tbW9uIG5hbWUuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2NhZmlsZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0EgY2VydGlmaWNhdGUgYXV0aG9yaXR5IGZpbGUuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2NhcGF0aCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0EgZGlyZWN0b3J5IHRoYXQgY29udGFpbnMgbXVsdGlwbGUgY2VydGlmaWNhdGUgYXV0aG9yaXR5IGZpbGVzLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdsb2NhbF9jZXJ0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnQSBQRU0gZm9ybWF0dGVkIGNlcnRpZmljYXRlIGZpbGUuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2xvY2FsX3BrJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnQSBwcml2YXRlIGtleSBmaWxlLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdwYXNzcGhyYXNlJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnVGhlIHBhc3NwaHJhc2UgdXNlZCB0byBlbmNyeXB0IHRoZSAibG9jYWxfcGsiIGZpbGUuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2NpcGhlcnMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdBIGxpc3Qgb2YgU1NML1RMUyBjaXBoZXJzIHNlcGFyYXRlZCBieSBjb2xvbnMsIGNvbW1hcyBvciBzcGFjZXMgKGUuZy4gIlJDMy1TSEE6VExTMTMtQUVTLTEyOC1HQ00tU0hBMjU2Ii4uLiknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdwZWVyX2ZpbmdlcnByaW50JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnQXNzb2NpYXRpdmUgYXJyYXk6IGhhc2hpbmcgYWxnb3JpdGhtID0+IGhhc2goZXMpLicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPm5vcm1hbGl6ZUtleXMoZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnZhcmlhYmxlTm9kZSgnc2hhMScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFyaWFibGVOb2RlKCdwaW4tc2hhMjU2JyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT52YXJpYWJsZU5vZGUoJ21kNScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXBwZW5kKCR0aGlzLT5hZGRIdHRwQ2xpZW50UmV0cnlTZWN0aW9uKCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkSHR0cENsaWVudFJldHJ5U2VjdGlvbigpCiAgICB7CiAgICAgICAgJHJvb3QgPSBuZXcgTm9kZUJ1aWxkZXIoKTsKCiAgICAgICAgcmV0dXJuICRyb290CiAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdyZXRyeV9mYWlsZWQnKQogICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ2h0dHBfY29kZScpCiAgICAgICAgICAgICAgICAtPmNhbkJlRW5hYmxlZCgpCiAgICAgICAgICAgICAgICAtPmFkZERlZmF1bHRzSWZOb3RTZXQoKQogICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCkKICAgICAgICAgICAgICAgICAgICAtPmFsd2F5cyhmdW5jdGlvbiAoJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCR2WydyZXRyeV9zdHJhdGVneSddKSAmJiAoaXNzZXQoJHZbJ2h0dHBfY29kZXMnXSkgfHwgaXNzZXQoJHZbJ2RlbGF5J10pIHx8IGlzc2V0KCR2WydtdWx0aXBsaWVyJ10pIHx8IGlzc2V0KCR2WydtYXhfZGVsYXknXSkgfHwgaXNzZXQoJHZbJ2ppdHRlciddKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBcSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uKCdUaGUgInJldHJ5X3N0cmF0ZWd5IiBvcHRpb24gY2Fubm90IGJlIHVzZWQgYWxvbmcgd2l0aCB0aGUgImh0dHBfY29kZXMiLCAiZGVsYXkiLCAibXVsdGlwbGllciIsICJtYXhfZGVsYXkiIG9yICJqaXR0ZXIiIG9wdGlvbnMuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkdjsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdyZXRyeV9zdHJhdGVneScpLT5kZWZhdWx0TnVsbCgpLT5pbmZvKCdzZXJ2aWNlIGlkIHRvIG92ZXJyaWRlIHRoZSByZXRyeSBzdHJhdGVneScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdodHRwX2NvZGVzJykKICAgICAgICAgICAgICAgICAgICAgICAgLT5wZXJmb3JtTm9EZWVwTWVyZ2luZygpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmQXJyYXkoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKHN0YXRpYyBmdW5jdGlvbiAoJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGlzdCA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR2IGFzICRrZXkgPT4gJHZhbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNfbnVtZXJpYygkdmFsKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxpc3RbXSA9IFsnY29kZScgPT4gJHZhbF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZWlmIChcaXNfYXJyYXkoJHZhbCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkdmFsWydjb2RlJ10pIHx8IGlzc2V0KCR2YWxbJ21ldGhvZHMnXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGlzdFtdID0gJHZhbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxpc3RbXSA9IFsnY29kZScgPT4gJGtleSwgJ21ldGhvZHMnID0+ICR2YWxdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VpZiAodHJ1ZSA9PT0gJHZhbCB8fCBudWxsID09PSAkdmFsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGlzdFtdID0gWydjb2RlJyA9PiAka2V5XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRsaXN0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCdjb2RlJykKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheVByb3RvdHlwZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygnbWV0aG9kJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW50ZWdlck5vZGUoJ2NvZGUnKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnbWV0aG9kcycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZBcnJheSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnRoZW4oZnVuY3Rpb24gKCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5X21hcCgnc3RydG91cHBlcicsICR2KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ3NjYWxhcicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ0EgbGlzdCBvZiBIVFRQIG1ldGhvZHMgdGhhdCB0cmlnZ2VycyBhIHJldHJ5IGZvciB0aGlzIHN0YXR1cyBjb2RlLiBXaGVuIGVtcHR5LCBhbGwgbWV0aG9kcyBhcmUgcmV0cmllZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnQSBsaXN0IG9mIEhUVFAgc3RhdHVzIGNvZGUgdGhhdCB0cmlnZ2VycyBhIHJldHJ5JykKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5pbnRlZ2VyTm9kZSgnbWF4X3JldHJpZXMnKS0+ZGVmYXVsdFZhbHVlKDMpLT5taW4oMCktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5pbnRlZ2VyTm9kZSgnZGVsYXknKS0+ZGVmYXVsdFZhbHVlKDEwMDApLT5taW4oMCktPmluZm8oJ1RpbWUgaW4gbXMgdG8gZGVsYXkgKG9yIHRoZSBpbml0aWFsIHZhbHVlIHdoZW4gbXVsdGlwbGllciBpcyB1c2VkKScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZmxvYXROb2RlKCdtdWx0aXBsaWVyJyktPmRlZmF1bHRWYWx1ZSgyKS0+bWluKDEpLT5pbmZvKCdJZiBncmVhdGVyIHRoYW4gMSwgZGVsYXkgd2lsbCBncm93IGV4cG9uZW50aWFsbHkgZm9yIGVhY2ggcmV0cnk6IGRlbGF5ICogKG11bHRpcGxlIF4gcmV0cmllcyknKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmludGVnZXJOb2RlKCdtYXhfZGVsYXknKS0+ZGVmYXVsdFZhbHVlKDApLT5taW4oMCktPmluZm8oJ01heCB0aW1lIGluIG1zIHRoYXQgYSByZXRyeSBzaG91bGQgZXZlciBiZSBkZWxheWVkICgwID0gaW5maW5pdGUpJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5mbG9hdE5vZGUoJ2ppdHRlcicpLT5kZWZhdWx0VmFsdWUoMC4xKS0+bWluKDApLT5tYXgoMSktPmluZm8oJ1JhbmRvbW5lc3MgaW4gcGVyY2VudCAoYmV0d2VlbiAwIGFuZCAxKSB0byBhcHBseSB0byB0aGUgZGVsYXknKS0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgOwogICAgfQoKICAgIHByaXZhdGUgZnVuY3Rpb24gYWRkTWFpbGVyU2VjdGlvbihBcnJheU5vZGVEZWZpbml0aW9uICRyb290Tm9kZSkKICAgIHsKICAgICAgICAkcm9vdE5vZGUKICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnbWFpbGVyJykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ01haWxlciBjb25maWd1cmF0aW9uJykKICAgICAgICAgICAgICAgICAgICAtPnshY2xhc3NfZXhpc3RzKEZ1bGxTdGFjazo6Y2xhc3MpICYmIGNsYXNzX2V4aXN0cyhNYWlsZXI6OmNsYXNzKSA/ICdjYW5CZURpc2FibGVkJyA6ICdjYW5CZUVuYWJsZWQnfSgpCiAgICAgICAgICAgICAgICAgICAgLT52YWxpZGF0ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZUcnVlKGZ1bmN0aW9uICgkdikgeyByZXR1cm4gaXNzZXQoJHZbJ2RzbiddKSAmJiBcY291bnQoJHZbJ3RyYW5zcG9ydHMnXSk7IH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbkludmFsaWQoJyJkc24iIGFuZCAidHJhbnNwb3J0cyIgY2Fubm90IGJlIHVzZWQgdG9nZXRoZXIuJykKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ3RyYW5zcG9ydCcpCiAgICAgICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ2hlYWRlcicpCiAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+c2NhbGFyTm9kZSgnbWVzc2FnZV9idXMnKS0+ZGVmYXVsdE51bGwoKS0+aW5mbygnVGhlIG1lc3NhZ2UgYnVzIHRvIHVzZS4gRGVmYXVsdHMgdG8gdGhlIGRlZmF1bHQgYnVzIGlmIHRoZSBNZXNzZW5nZXIgY29tcG9uZW50IGlzIGluc3RhbGxlZC4nKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdkc24nKS0+ZGVmYXVsdE51bGwoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ3RyYW5zcG9ydHMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgnbmFtZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnc2NhbGFyJyktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2VudmVsb3BlJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnTWFpbGVyIEVudmVsb3BlIGNvbmZpZ3VyYXRpb24nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdzZW5kZXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgncmVjaXBpZW50cycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cGVyZm9ybU5vRGVlcE1lcmdpbmcoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmQXJyYXkoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKGZ1bmN0aW9uICgkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnJheV9maWx0ZXIoYXJyYXlfdmFsdWVzKCR2KSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2hlYWRlcnMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5ub3JtYWxpemVLZXlzKGZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT51c2VBdHRyaWJ1dGVBc0tleSgnbmFtZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnYXJyYXknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+bm9ybWFsaXplS2V5cyhmYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmJlZm9yZU5vcm1hbGl6YXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmlmVHJ1ZShmdW5jdGlvbiAoJHYpIHsgcmV0dXJuICFcaXNfYXJyYXkoJHYpIHx8IGFycmF5X2tleXMoJHYpICE9PSBbJ3ZhbHVlJ107IH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dGhlbihmdW5jdGlvbiAoJHYpIHsgcmV0dXJuIFsndmFsdWUnID0+ICR2XTsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFyaWFibGVOb2RlKCd2YWx1ZScpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgIDsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGFkZE5vdGlmaWVyU2VjdGlvbihBcnJheU5vZGVEZWZpbml0aW9uICRyb290Tm9kZSkKICAgIHsKICAgICAgICAkcm9vdE5vZGUKICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnbm90aWZpZXInKQogICAgICAgICAgICAgICAgICAgIC0+aW5mbygnTm90aWZpZXIgY29uZmlndXJhdGlvbicpCiAgICAgICAgICAgICAgICAgICAgLT57IWNsYXNzX2V4aXN0cyhGdWxsU3RhY2s6OmNsYXNzKSAmJiBjbGFzc19leGlzdHMoTm90aWZpZXI6OmNsYXNzKSA/ICdjYW5CZURpc2FibGVkJyA6ICdjYW5CZUVuYWJsZWQnfSgpCiAgICAgICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ2NoYXR0ZXJfdHJhbnNwb3J0JykKICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5hcnJheU5vZGUoJ2NoYXR0ZXJfdHJhbnNwb3J0cycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmZpeFhtbENvbmZpZygndGV4dGVyX3RyYW5zcG9ydCcpCiAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCd0ZXh0ZXJfdHJhbnNwb3J0cycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdzY2FsYXInKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5ib29sZWFuTm9kZSgnbm90aWZpY2F0aW9uX29uX2ZhaWxlZF9tZXNzYWdlcycpLT5kZWZhdWx0RmFsc2UoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdjaGFubmVsX3BvbGljeScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+cHJvdG90eXBlKCdhcnJheScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5iZWZvcmVOb3JtYWxpemF0aW9uKCktPmlmU3RyaW5nKCktPnRoZW4oZnVuY3Rpb24gKHN0cmluZyAkdikgeyByZXR1cm4gWyR2XTsgfSktPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5wcm90b3R5cGUoJ3NjYWxhcicpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+Zml4WG1sQ29uZmlnKCdhZG1pbl9yZWNpcGllbnQnKQogICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgnYWRtaW5fcmVjaXBpZW50cycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnByb3RvdHlwZSgnYXJyYXknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2VtYWlsJyktPmNhbm5vdEJlRW1wdHkoKS0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdwaG9uZScpLT5kZWZhdWx0VmFsdWUoJycpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgLT5lbmQoKQogICAgICAgIDsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGFkZFJhdGVMaW1pdGVyU2VjdGlvbihBcnJheU5vZGVEZWZpbml0aW9uICRyb290Tm9kZSkKICAgIHsKICAgICAgICAkcm9vdE5vZGUKICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAtPmFycmF5Tm9kZSgncmF0ZV9saW1pdGVyJykKICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1JhdGUgbGltaXRlciBjb25maWd1cmF0aW9uJykKICAgICAgICAgICAgICAgICAgICAtPnshY2xhc3NfZXhpc3RzKEZ1bGxTdGFjazo6Y2xhc3MpICYmIGNsYXNzX2V4aXN0cyhUb2tlbkJ1Y2tldExpbWl0ZXI6OmNsYXNzKSA/ICdjYW5CZURpc2FibGVkJyA6ICdjYW5CZUVuYWJsZWQnfSgpCiAgICAgICAgICAgICAgICAgICAgLT5maXhYbWxDb25maWcoJ2xpbWl0ZXInKQogICAgICAgICAgICAgICAgICAgIC0+YmVmb3JlTm9ybWFsaXphdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+aWZUcnVlKGZ1bmN0aW9uICgkdikgeyByZXR1cm4gXGlzX2FycmF5KCR2KSAmJiAhaXNzZXQoJHZbJ2xpbWl0ZXJzJ10pICYmICFpc3NldCgkdlsnbGltaXRlciddKTsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLT50aGVuKGZ1bmN0aW9uIChhcnJheSAkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG5ld1YgPSBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VuYWJsZWQnID0+ICR2WydlbmFibGVkJ10gPz8gdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNldCgkdlsnZW5hYmxlZCddKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbmV3VlsnbGltaXRlcnMnXSA9ICR2OwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkbmV3VjsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5jaGlsZHJlbigpCiAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdsaW1pdGVycycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnVzZUF0dHJpYnV0ZUFzS2V5KCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlQcm90b3R5cGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+Y2hpbGRyZW4oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2xvY2tfZmFjdG9yeScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmluZm8oJ1RoZSBzZXJ2aWNlIElEIG9mIHRoZSBsb2NrIGZhY3RvcnkgdXNlZCBieSB0aGlzIGxpbWl0ZXInKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VmFsdWUoJ2xvY2suZmFjdG9yeScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdjYWNoZV9wb29sJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnVGhlIGNhY2hlIHBvb2wgdG8gdXNlIGZvciBzdG9yaW5nIHRoZSBjdXJyZW50IGxpbWl0ZXIgc3RhdGUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5kZWZhdWx0VmFsdWUoJ2NhY2hlLnJhdGVfbGltaXRlcicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+ZW5kKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5zY2FsYXJOb2RlKCdzdG9yYWdlX3NlcnZpY2UnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdUaGUgc2VydmljZSBJRCBvZiBhIGN1c3RvbSBzdG9yYWdlIGltcGxlbWVudGF0aW9uLCB0aGlzIHByZWNlZGVzIGFueSBjb25maWd1cmVkICJjYWNoZV9wb29sIicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmRlZmF1bHROdWxsKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVudW1Ob2RlKCdwb2xpY3knKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdUaGUgcmF0ZSBsaW1pdGluZyBhbGdvcml0aG0gdG8gdXNlIGZvciB0aGlzIHJhdGUnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pc1JlcXVpcmVkKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+dmFsdWVzKFsnZml4ZWRfd2luZG93JywgJ3Rva2VuX2J1Y2tldCcsICdzbGlkaW5nX3dpbmRvdycsICdub19saW1pdCddKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW50ZWdlck5vZGUoJ2xpbWl0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnVGhlIG1heGltdW0gYWxsb3dlZCBoaXRzIGluIGEgZml4ZWQgaW50ZXJ2YWwgb3IgYnVyc3QnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pc1JlcXVpcmVkKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2ludGVydmFsJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnQ29uZmlndXJlcyB0aGUgZml4ZWQgaW50ZXJ2YWwgaWYgInBvbGljeSIgaXMgc2V0IHRvICJmaXhlZF93aW5kb3ciIG9yICJzbGlkaW5nX3dpbmRvdyIuIFRoZSB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyIGZvbGxvd2VkIGJ5ICJzZWNvbmQiLCAibWludXRlIiwgImhvdXIiLCAiZGF5IiwgIndlZWsiIG9yICJtb250aCIgKG9yIHRoZWlyIHBsdXJhbCBlcXVpdmFsZW50KS4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+YXJyYXlOb2RlKCdyYXRlJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0+aW5mbygnQ29uZmlndXJlcyB0aGUgZmlsbCByYXRlIGlmICJwb2xpY3kiIGlzIHNldCB0byAidG9rZW5fYnVja2V0IicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmNoaWxkcmVuKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPnNjYWxhck5vZGUoJ2ludGVydmFsJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbmZvKCdDb25maWd1cmVzIHRoZSByYXRlIGludGVydmFsLiBUaGUgdmFsdWUgbXVzdCBiZSBhIG51bWJlciBmb2xsb3dlZCBieSAic2Vjb25kIiwgIm1pbnV0ZSIsICJob3VyIiwgImRheSIsICJ3ZWVrIiBvciAibW9udGgiIChvciB0aGVpciBwbHVyYWwgZXF1aXZhbGVudCkuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5pbnRlZ2VyTm9kZSgnYW1vdW50JyktPmluZm8oJ0Ftb3VudCBvZiB0b2tlbnMgdG8gYWRkIGVhY2ggaW50ZXJ2YWwnKS0+ZGVmYXVsdFZhbHVlKDEpLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAgICAgLT5lbmQoKQogICAgICAgICAgICAtPmVuZCgpCiAgICAgICAgOwogICAgfQp9CiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjE6e3M6NTE6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjUxOiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiRGVwZW5kZW5jeUluamVjdGlvbiI7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YToxOntzOjY1OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbiI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18iOjExOntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NToiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMzoiQ29uZmlndXJhdGlvbiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NDM6IkZyYW1ld29ya0V4dGVuc2lvbiBjb25maWd1cmF0aW9uIHN0cnVjdHVyZS4iO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6Mjp7aTowO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEF1dGhvciI6NDp7czo3OiIAKgBuYW1lIjtzOjY6ImF1dGhvciI7czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEF1dGhvcgBhdXRob3JOYW1lIjtzOjEzOiJKZXJlbXkgTWlrb2xhIjtzOjU4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcQXV0aG9yAGF1dGhvckVtYWlsIjtzOjE3OiJqbWlrb2xhQGdtYWlsLmNvbSI7czoxNDoiACoAZGVzY3JpcHRpb24iO047fWk6MTtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xBdXRob3IiOjQ6e3M6NzoiACoAbmFtZSI7czo2OiJhdXRob3IiO3M6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xBdXRob3IAYXV0aG9yTmFtZSI7czoxNjoiR3LDqWdvaXJlIFBpbmVhdSI7czo1ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEF1dGhvcgBhdXRob3JFbWFpbCI7czoxODoibHlyaXh4QGx5cml4eC5pbmZvIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tjt9fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAY29udGV4dCI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQiOjI6e3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2UiO3M6NTA6IlN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uIjtzOjU2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlQWxpYXNlcyI7YToyNjp7czoxMDoiQW5ub3RhdGlvbiI7czozODoiRG9jdHJpbmVcQ29tbW9uXEFubm90YXRpb25zXEFubm90YXRpb24iO3M6NToiQ2FjaGUiO3M6Mjc6IkRvY3RyaW5lXENvbW1vblxDYWNoZVxDYWNoZSI7czoxMDoiQ29ubmVjdGlvbiI7czoyNDoiRG9jdHJpbmVcREJBTFxDb25uZWN0aW9uIjtzOjk6IkZ1bGxTdGFjayI7czoyNDoiU3ltZm9ueVxCdW5kbGVcRnVsbFN0YWNrIjtzOjc6IlBhY2thZ2UiO3M6MzE6IlN5bWZvbnlcQ29tcG9uZW50XEFzc2V0XFBhY2thZ2UiO3M6MTk6IkFycmF5Tm9kZURlZmluaXRpb24iO3M6NjM6IlN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czoxMToiTm9kZUJ1aWxkZXIiO3M6NTU6IlN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcTm9kZUJ1aWxkZXIiO3M6MTE6IlRyZWVCdWlsZGVyIjtzOjU1OiJTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXFRyZWVCdWlsZGVyIjtzOjIyOiJDb25maWd1cmF0aW9uSW50ZXJmYWNlIjtzOjU4OiJTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxDb25maWd1cmF0aW9uSW50ZXJmYWNlIjtzOjI5OiJJbnZhbGlkQ29uZmlndXJhdGlvbkV4Y2VwdGlvbiI7czo3NToiU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cRXhjZXB0aW9uXEludmFsaWRDb25maWd1cmF0aW9uRXhjZXB0aW9uIjtzOjE0OiJMb2dpY0V4Y2VwdGlvbiI7czo2MjoiU3ltZm9ueVxDb21wb25lbnRcRGVwZW5kZW5jeUluamVjdGlvblxFeGNlcHRpb25cTG9naWNFeGNlcHRpb24iO3M6NDoiRm9ybSI7czoyNzoiU3ltZm9ueVxDb21wb25lbnRcRm9ybVxGb3JtIjtzOjEwOiJIdHRwQ2xpZW50IjtzOjM5OiJTeW1mb255XENvbXBvbmVudFxIdHRwQ2xpZW50XEh0dHBDbGllbnQiO3M6NjoiQ29va2llIjtzOjM5OiJTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxDb29raWUiO3M6NDoiTG9jayI7czoyNzoiU3ltZm9ueVxDb21wb25lbnRcTG9ja1xMb2NrIjtzOjE0OiJTZW1hcGhvcmVTdG9yZSI7czo0MzoiU3ltZm9ueVxDb21wb25lbnRcTG9ja1xTdG9yZVxTZW1hcGhvcmVTdG9yZSI7czo2OiJNYWlsZXIiO3M6MzE6IlN5bWZvbnlcQ29tcG9uZW50XE1haWxlclxNYWlsZXIiO3M6MTk6Ik1lc3NhZ2VCdXNJbnRlcmZhY2UiO3M6NDc6IlN5bWZvbnlcQ29tcG9uZW50XE1lc3NlbmdlclxNZXNzYWdlQnVzSW50ZXJmYWNlIjtzOjg6Ik5vdGlmaWVyIjtzOjM1OiJTeW1mb255XENvbXBvbmVudFxOb3RpZmllclxOb3RpZmllciI7czozMDoiUHJvcGVydHlJbmZvRXh0cmFjdG9ySW50ZXJmYWNlIjtzOjYxOiJTeW1mb255XENvbXBvbmVudFxQcm9wZXJ0eUluZm9cUHJvcGVydHlJbmZvRXh0cmFjdG9ySW50ZXJmYWNlIjtzOjE4OiJUb2tlbkJ1Y2tldExpbWl0ZXIiO3M6NTU6IlN5bWZvbnlcQ29tcG9uZW50XFJhdGVMaW1pdGVyXFBvbGljeVxUb2tlbkJ1Y2tldExpbWl0ZXIiO3M6MTA6IlNlcmlhbGl6ZXIiO3M6Mzk6IlN5bWZvbnlcQ29tcG9uZW50XFNlcmlhbGl6ZXJcU2VyaWFsaXplciI7czoxMDoiVHJhbnNsYXRvciI7czo0MDoiU3ltZm9ueVxDb21wb25lbnRcVHJhbnNsYXRpb25cVHJhbnNsYXRvciI7czoxMDoiVmFsaWRhdGlvbiI7czozODoiU3ltZm9ueVxDb21wb25lbnRcVmFsaWRhdG9yXFZhbGlkYXRpb24iO3M6MjA6Ikh0dHBIZWFkZXJTZXJpYWxpemVyIjtzOjQ2OiJTeW1mb255XENvbXBvbmVudFxXZWJMaW5rXEh0dHBIZWFkZXJTZXJpYWxpemVyIjtzOjE0OiJXb3JrZmxvd0V2ZW50cyI7czo0MToiU3ltZm9ueVxDb21wb25lbnRcV29ya2Zsb3dcV29ya2Zsb3dFdmVudHMiO319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NDE7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlU3RhcnQiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVFbmQiO2I6MDt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHBhcmVudCI7TjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AaW1wbGVtZW50cyI7YToxOntzOjU5OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQ29uZmlndXJhdGlvbkludGVyZmFjZSI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjU5OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQ29uZmlndXJhdGlvbkludGVyZmFjZSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjIyOiJDb25maWd1cmF0aW9uSW50ZXJmYWNlIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBjb25zdGFudHMiO2E6MDp7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBwcm9wZXJ0aWVzIjthOjE6e3M6NzM6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjokZGVidWciO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkiOjg6e3M6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NzM6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjokZGVidWciO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo1OiJkZWJ1ZyI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGRvY0Jsb2NrIjtOO3M6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHR5cGVzIjthOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBkZWZhdWx0IjtOO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHN0YXRpYyI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NDk7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZSI7Tjt9fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRob2RzIjthOjMyOntzOjgwOiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6X19jb25zdHJ1Y3QoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MDoiIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjE6e2k6MDtPOjQ0OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbSI6Njp7czo1ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAHZhcmlhYmxlTmFtZSI7czo1OiJkZWJ1ZyI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAGlzVmFyaWFkaWMiO2I6MDtzOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0AaXNSZWZlcmVuY2UiO2I6MDtzOjc6IgAqAHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xCb29sZWFuIjowOnt9czo3OiIAKgBuYW1lIjtzOjU6InBhcmFtIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czozNToiV2hldGhlciBkZWJ1Z2dpbmcgaXMgZW5hYmxlZCBvciBub3QiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX19czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtyOjM1O3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjUxO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjgwOiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6X19jb25zdHJ1Y3QoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJfX2NvbnN0cnVjdCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo1OiJkZWJ1ZyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEJvb2xlYW4iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo1NDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjg5OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6Z2V0Q29uZmlnVHJlZUJ1aWxkZXIoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NDE6IkdlbmVyYXRlcyB0aGUgY29uZmlndXJhdGlvbiB0cmVlIGJ1aWxkZXIuIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjE6e2k6MDtPOjQ2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xSZXR1cm5fIjozOntzOjc6IgAqAHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo1NjoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcVHJlZUJ1aWxkZXIiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiVHJlZUJ1aWxkZXIiO319czo3OiIAKgBuYW1lIjtzOjY6InJldHVybiI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MTY6IlRoZSB0cmVlIGJ1aWxkZXIiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX19czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtyOjM1O3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjU5O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg5OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6Z2V0Q29uZmlnVHJlZUJ1aWxkZXIoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjIwOiJnZXRDb25maWdUcmVlQnVpbGRlciI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo2NDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjg2OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkU2VjcmV0c1NlY3Rpb24oKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo4NjoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZFNlY3JldHNTZWN0aW9uKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNzoiYWRkU2VjcmV0c1NlY3Rpb24iO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6InJvb3ROb2RlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXEFycmF5Tm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxNDM7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo4MzoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZENzcmZTZWN0aW9uKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODM6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRDc3JmU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTQ6ImFkZENzcmZTZWN0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo4OiJyb290Tm9kZSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6IkFycmF5Tm9kZURlZmluaXRpb24iO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTU5O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6ODM6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRGb3JtU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjgzOiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkRm9ybVNlY3Rpb24oKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE0OiJhZGRGb3JtU2VjdGlvbiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoicm9vdE5vZGUiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJBcnJheU5vZGVEZWZpbml0aW9uIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjE3NztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjg4OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkSHR0cENhY2hlU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg4OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkSHR0cENhY2hlU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6ImFkZEh0dHBDYWNoZVNlY3Rpb24iO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6InJvb3ROb2RlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXEFycmF5Tm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyMTM7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo4MjoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZEVzaVNlY3Rpb24oKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo4MjoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZEVzaVNlY3Rpb24oKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEzOiJhZGRFc2lTZWN0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo4OiJyb290Tm9kZSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6IkFycmF5Tm9kZURlZmluaXRpb24iO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjQyO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6ODI6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRTc2lTZWN0aW9uKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODI6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRTc2lTZWN0aW9uKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMzoiYWRkU3NpU2VjdGlvbiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoicm9vdE5vZGUiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJBcnJheU5vZGVEZWZpbml0aW9uIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI1NDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjg4OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkRnJhZ21lbnRzU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg4OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkRnJhZ21lbnRzU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6ImFkZEZyYWdtZW50c1NlY3Rpb24iO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6InJvb3ROb2RlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXEFycmF5Tm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyNjU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo4NzoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZFByb2ZpbGVyU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg3OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkUHJvZmlsZXJTZWN0aW9uKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxODoiYWRkUHJvZmlsZXJTZWN0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo4OiJyb290Tm9kZSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6IkFycmF5Tm9kZURlZmluaXRpb24iO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjgxO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6ODc6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRXb3JrZmxvd1NlY3Rpb24oKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo4NzoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZFdvcmtmbG93U2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTg6ImFkZFdvcmtmbG93U2VjdGlvbiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoicm9vdE5vZGUiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJBcnJheU5vZGVEZWZpbml0aW9uIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI5OTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjg1OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkUm91dGVyU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg1OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkUm91dGVyU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTY6ImFkZFJvdXRlclNlY3Rpb24iO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6InJvb3ROb2RlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXEFycmF5Tm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo1NjI7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo4NjoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZFNlc3Npb25TZWN0aW9uKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODY6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRTZXNzaW9uU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTc6ImFkZFNlc3Npb25TZWN0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo4OiJyb290Tm9kZSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6IkFycmF5Tm9kZURlZmluaXRpb24iO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NTk0O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6ODY6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRSZXF1ZXN0U2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg2OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkUmVxdWVzdFNlY3Rpb24oKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE3OiJhZGRSZXF1ZXN0U2VjdGlvbiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoicm9vdE5vZGUiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJBcnJheU5vZGVEZWZpbml0aW9uIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjY0MztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjg1OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkQXNzZXRzU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg1OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkQXNzZXRzU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTY6ImFkZEFzc2V0c1NlY3Rpb24iO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6InJvb3ROb2RlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXEFycmF5Tm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo2Njk7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo4OToiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZFRyYW5zbGF0b3JTZWN0aW9uKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODk6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRUcmFuc2xhdG9yU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MjA6ImFkZFRyYW5zbGF0b3JTZWN0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo4OiJyb290Tm9kZSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6IkFycmF5Tm9kZURlZmluaXRpb24iO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NzU3O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6ODk6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRWYWxpZGF0aW9uU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg5OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkVmFsaWRhdGlvblNlY3Rpb24oKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjIwOiJhZGRWYWxpZGF0aW9uU2VjdGlvbiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoicm9vdE5vZGUiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJBcnJheU5vZGVEZWZpbml0aW9uIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjgxMDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjkwOiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkQW5ub3RhdGlvbnNTZWN0aW9uKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6OTA6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRBbm5vdGF0aW9uc1NlY3Rpb24oKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjIxOiJhZGRBbm5vdGF0aW9uc1NlY3Rpb24iO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6InJvb3ROb2RlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXEFycmF5Tm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo5MDA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo4OToiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZFNlcmlhbGl6ZXJTZWN0aW9uKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODk6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRTZXJpYWxpemVyU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MjA6ImFkZFNlcmlhbGl6ZXJTZWN0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo4OiJyb290Tm9kZSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6IkFycmF5Tm9kZURlZmluaXRpb24iO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6OTE3O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6OTM6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRQcm9wZXJ0eUFjY2Vzc1NlY3Rpb24oKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5MzoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZFByb3BlcnR5QWNjZXNzU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MjQ6ImFkZFByb3BlcnR5QWNjZXNzU2VjdGlvbiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoicm9vdE5vZGUiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJBcnJheU5vZGVEZWZpbml0aW9uIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjk0NDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjkxOiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkUHJvcGVydHlJbmZvU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjkxOiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkUHJvcGVydHlJbmZvU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MjI6ImFkZFByb3BlcnR5SW5mb1NlY3Rpb24iO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6InJvb3ROb2RlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXEFycmF5Tm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo5NjM7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo4NDoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZENhY2hlU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg0OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkQ2FjaGVTZWN0aW9uKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNToiYWRkQ2FjaGVTZWN0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo4OiJyb290Tm9kZSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6IkFycmF5Tm9kZURlZmluaXRpb24iO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6OTc1O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6ODg6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRQaHBFcnJvcnNTZWN0aW9uKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODg6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRQaHBFcnJvcnNTZWN0aW9uKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiYWRkUGhwRXJyb3JzU2VjdGlvbiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoicm9vdE5vZGUiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJBcnJheU5vZGVEZWZpbml0aW9uIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjEwNjU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo4MzoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZExvY2tTZWN0aW9uKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODM6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRMb2NrU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTQ6ImFkZExvY2tTZWN0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo4OiJyb290Tm9kZSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6IkFycmF5Tm9kZURlZmluaXRpb24iO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTA5NDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjg2OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkV2ViTGlua1NlY3Rpb24oKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo4NjoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZFdlYkxpbmtTZWN0aW9uKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNzoiYWRkV2ViTGlua1NlY3Rpb24iO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6InJvb3ROb2RlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXEFycmF5Tm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxMTUzO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6ODg6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRNZXNzZW5nZXJTZWN0aW9uKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODg6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRNZXNzZW5nZXJTZWN0aW9uKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiYWRkTWVzc2VuZ2VyU2VjdGlvbiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoicm9vdE5vZGUiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJBcnJheU5vZGVEZWZpbml0aW9uIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjExNjU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo5MDoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZFJvYm90c0luZGV4U2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjkwOiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkUm9ib3RzSW5kZXhTZWN0aW9uKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoyMToiYWRkUm9ib3RzSW5kZXhTZWN0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo4OiJyb290Tm9kZSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6IkFycmF5Tm9kZURlZmluaXRpb24iO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTM1MztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjg5OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkSHR0cENsaWVudFNlY3Rpb24oKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo4OToiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZEh0dHBDbGllbnRTZWN0aW9uKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoyMDoiYWRkSHR0cENsaWVudFNlY3Rpb24iO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6InJvb3ROb2RlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXEFycmF5Tm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxMzY2O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6OTQ6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRIdHRwQ2xpZW50UmV0cnlTZWN0aW9uKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6OTQ6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGRIdHRwQ2xpZW50UmV0cnlTZWN0aW9uKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoyNToiYWRkSHR0cENsaWVudFJldHJ5U2VjdGlvbiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTYzMTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjg1OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkTWFpbGVyU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg1OiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkTWFpbGVyU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTY6ImFkZE1haWxlclNlY3Rpb24iO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6InJvb3ROb2RlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxTeW1mb255XENvbXBvbmVudFxDb25maWdcRGVmaW5pdGlvblxCdWlsZGVyXEFycmF5Tm9kZURlZmluaXRpb24iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxOToiQXJyYXlOb2RlRGVmaW5pdGlvbiI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxNzAyO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6ODc6IlxTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcRGVwZW5kZW5jeUluamVjdGlvblxDb25maWd1cmF0aW9uOjphZGROb3RpZmllclNlY3Rpb24oKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo4NzoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZE5vdGlmaWVyU2VjdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTg6ImFkZE5vdGlmaWVyU2VjdGlvbiI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoicm9vdE5vZGUiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XENvbmZpZ1xEZWZpbml0aW9uXEJ1aWxkZXJcQXJyYXlOb2RlRGVmaW5pdGlvbiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE5OiJBcnJheU5vZGVEZWZpbml0aW9uIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjE3NTg7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo5MDoiXFN5bWZvbnlcQnVuZGxlXEZyYW1ld29ya0J1bmRsZVxEZXBlbmRlbmN5SW5qZWN0aW9uXENvbmZpZ3VyYXRpb246OmFkZFJhdGVMaW1pdGVyU2VjdGlvbigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjkwOiJcU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXERlcGVuZGVuY3lJbmplY3Rpb25cQ29uZmlndXJhdGlvbjo6YWRkUmF0ZUxpbWl0ZXJTZWN0aW9uKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoyMToiYWRkUmF0ZUxpbWl0ZXJTZWN0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo4OiJyb290Tm9kZSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXERlZmluaXRpb25cQnVpbGRlclxBcnJheU5vZGVEZWZpbml0aW9uIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6IkFycmF5Tm9kZURlZmluaXRpb24iO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTgwNztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX19czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHVzZWRUcmFpdHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NDc7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e319";